
OutSensor_t_p_h.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1b  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063d  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d3  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dd  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000029c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	e0 c0       	rjmp	.+448    	; 0x1d8 <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	67 c0       	rjmp	.+206    	; 0xea <__vector_13>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	22 c0       	rjmp	.+68     	; 0x68 <__bad_interrupt>
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	15 c1       	rjmp	.+554    	; 0x252 <__vector_11+0x7a>
  28:	17 c1       	rjmp	.+558    	; 0x258 <__vector_11+0x80>
  2a:	19 c1       	rjmp	.+562    	; 0x25e <__vector_11+0x86>
  2c:	1b c1       	rjmp	.+566    	; 0x264 <__vector_11+0x8c>
  2e:	1d c1       	rjmp	.+570    	; 0x26a <__vector_11+0x92>
  30:	1f c1       	rjmp	.+574    	; 0x270 <__vector_11+0x98>
  32:	21 c1       	rjmp	.+578    	; 0x276 <__vector_11+0x9e>
  34:	23 c1       	rjmp	.+582    	; 0x27c <__vector_11+0xa4>
  36:	25 c1       	rjmp	.+586    	; 0x282 <__vector_11+0xaa>
  38:	27 c1       	rjmp	.+590    	; 0x288 <__vector_11+0xb0>
  3a:	29 c1       	rjmp	.+594    	; 0x28e <__vector_11+0xb6>
  3c:	2b c1       	rjmp	.+598    	; 0x294 <__vector_11+0xbc>
  3e:	2d c1       	rjmp	.+602    	; 0x29a <__vector_11+0xc2>
  40:	2f c1       	rjmp	.+606    	; 0x2a0 <__vector_11+0xc8>
  42:	31 c1       	rjmp	.+610    	; 0x2a6 <__vector_11+0xce>
  44:	33 c1       	rjmp	.+614    	; 0x2ac <__vector_11+0xd4>
  46:	35 c1       	rjmp	.+618    	; 0x2b2 <__vector_11+0xda>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf e5       	ldi	r28, 0x5F	; 95
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a0 e6       	ldi	r26, 0x60	; 96
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a7 37       	cpi	r26, 0x77	; 119
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	b8 d1       	rcall	.+880    	; 0x3d6 <main>
  66:	e0 c1       	rjmp	.+960    	; 0x428 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <_Z10LEDLAMP_ONj>:
bool ex_rx_enable = false;
bool ex_rx_data_complite = false;
// LED ON
void LEDLAMP_ON(unsigned int n_pin)
{
	PORTC |= ( 1 << n_pin );
  6a:	95 b3       	in	r25, 0x15	; 21
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	02 c0       	rjmp	.+4      	; 0x76 <_Z10LEDLAMP_ONj+0xc>
  72:	22 0f       	add	r18, r18
  74:	33 1f       	adc	r19, r19
  76:	8a 95       	dec	r24
  78:	e2 f7       	brpl	.-8      	; 0x72 <_Z10LEDLAMP_ONj+0x8>
  7a:	29 2b       	or	r18, r25
  7c:	25 bb       	out	0x15, r18	; 21
  7e:	08 95       	ret

00000080 <_Z11LEDLAMP_OFFj>:
}
// LED OFF
void LEDLAMP_OFF(unsigned int n_pin)
{
	PORTC &= ~( 1 << n_pin );
  80:	95 b3       	in	r25, 0x15	; 21
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <_Z11LEDLAMP_OFFj+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <_Z11LEDLAMP_OFFj+0x8>
  90:	20 95       	com	r18
  92:	29 23       	and	r18, r25
  94:	25 bb       	out	0x15, r18	; 21
  96:	08 95       	ret

00000098 <_Z8PWM_INITv>:
}
//Timer/Counter2 PWM
void PWM_INIT()
{
	PORTB=0x00;
  98:	18 ba       	out	0x18, r1	; 24
	DDRB=0x00;
  9a:	17 ba       	out	0x17, r1	; 23
	ASSR=0x00;
  9c:	12 bc       	out	0x22, r1	; 34
	TCCR2 |= (1<<WGM20)|(1<<COM21)|(1<<WGM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	8f 66       	ori	r24, 0x6F	; 111
  a2:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00;
  a4:	14 bc       	out	0x24, r1	; 36
	TIMSK=0x00;
  a6:	19 be       	out	0x39, r1	; 57
	OCR2=0x00;
  a8:	13 bc       	out	0x23, r1	; 35
  aa:	08 95       	ret

000000ac <_Z9UART_Initj>:
}

void UART_Init (unsigned int speed)
{
	// Устанавливаем скорость Baud Rate
	UBRRH = (unsigned char)( speed >> 8 );
  ac:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) speed;
  ae:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X); // Удвоение частоты
  b0:	59 9a       	sbi	0x0b, 1	; 11
	
	// Разрешение работы передатчика
	UCSRB = ( 1 << TXEN ) | ( 1 << RXEN ) | (1 << RXCIE ) | (1 << TXCIE );
  b2:	88 ed       	ldi	r24, 0xD8	; 216
  b4:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  b6:	8e e8       	ldi	r24, 0x8E	; 142
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <_Z14UART_Send_Charh>:
}

// Send to UART
void UART_Send_Char (unsigned char data_tx)////
{
	while ( !( UCSRA & (1<<UDRE)) ) {}
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <_Z14UART_Send_Charh>
	RS485_TR;
  c0:	93 9a       	sbi	0x12, 3	; 18
	UDR = data_tx;
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <_Z15UART_SendStringPh>:
}

// Send to UART
void UART_SendString (unsigned char data_tx[])
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
  d0:	8c 01       	movw	r16, r24
  d2:	0e 5e       	subi	r16, 0xEE	; 238
  d4:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for (i=0; i < RX_BUFFER_SIZE; i++) {
		UART_Send_Char(data_tx[i]);
  d6:	89 91       	ld	r24, Y+
  d8:	f1 df       	rcall	.-30     	; 0xbc <_Z14UART_Send_Charh>

// Send to UART
void UART_SendString (unsigned char data_tx[])
{
	int i;
	for (i=0; i < RX_BUFFER_SIZE; i++) {
  da:	c0 17       	cp	r28, r16
  dc:	d1 07       	cpc	r29, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <_Z15UART_SendStringPh+0x10>
		UART_Send_Char(data_tx[i]);
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	08 95       	ret

000000ea <__vector_13>:

ISR(USART_TXC_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
	RS485_RS; // Установить RE DE в 0. Прием
  f4:	93 98       	cbi	0x12, 3	; 18
}
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <_Z12crc16_commonPhh>:

unsigned short crc16_common(unsigned char* data, unsigned char len)
{
 100:	fc 01       	movw	r30, r24
 102:	ac 01       	movw	r20, r24
 104:	46 0f       	add	r20, r22
 106:	51 1d       	adc	r21, r1
	unsigned char y;
	unsigned short crc;
	crc = 0x0000;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
	while (len--)
 10c:	e4 17       	cp	r30, r20
 10e:	f5 07       	cpc	r31, r21
 110:	81 f0       	breq	.+32     	; 0x132 <_Z12crc16_commonPhh+0x32>
	{
		crc = ((unsigned short)*data++ << 8) ^ crc;
 112:	21 91       	ld	r18, Z+
 114:	92 27       	eor	r25, r18
 116:	28 e0       	ldi	r18, 0x08	; 8
		for (y = 0; y < 8; y++)
		{
			if (crc & 0x8000)
 118:	99 23       	and	r25, r25
 11a:	34 f4       	brge	.+12     	; 0x128 <_Z12crc16_commonPhh+0x28>
			crc = (crc << 1) ^ (0x8005);
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	35 e0       	ldi	r19, 0x05	; 5
 122:	83 27       	eor	r24, r19
 124:	90 58       	subi	r25, 0x80	; 128
 126:	02 c0       	rjmp	.+4      	; 0x12c <_Z12crc16_commonPhh+0x2c>
			else
			crc = crc << 1;
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	21 50       	subi	r18, 0x01	; 1
	unsigned short crc;
	crc = 0x0000;
	while (len--)
	{
		crc = ((unsigned short)*data++ << 8) ^ crc;
		for (y = 0; y < 8; y++)
 12e:	a1 f7       	brne	.-24     	; 0x118 <_Z12crc16_commonPhh+0x18>
 130:	ed cf       	rjmp	.-38     	; 0x10c <_Z12crc16_commonPhh+0xc>
			else
			crc = crc << 1;
		}
	}
	return crc;
}
 132:	08 95       	ret

00000134 <_Z16USART_SendPacketPhS_S_S_>:

void USART_SendPacket(unsigned char ADR_DBK[2], unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	62 97       	sbiw	r28, 0x12	; 18
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	8c 01       	movw	r16, r24
 152:	fb 01       	movw	r30, r22
 154:	7a 01       	movw	r14, r20
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3],
		CONTROL_DBK[0],
		CONTROL_DBK[1]};
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	42 e1       	ldi	r20, 0x12	; 18
 15c:	dc 01       	movw	r26, r24
 15e:	1d 92       	st	X+, r1
 160:	4a 95       	dec	r20
 162:	e9 f7       	brne	.-6      	; 0x15e <_Z16USART_SendPacketPhS_S_S_+0x2a>
 164:	d8 01       	movw	r26, r16
 166:	4c 91       	ld	r20, X
 168:	4a 83       	std	Y+2, r20	; 0x02
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	4c 91       	ld	r20, X
 16e:	4b 83       	std	Y+3, r20	; 0x03
{
	unsigned char tmp_tx_data[RX_BUFFER_SIZE] = {
		USART_STARTPACKET,
		ADR_DBK[0],
		ADR_DBK[1],
		DIEN_DBK[0],
 170:	45 e7       	ldi	r20, 0x75	; 117
 172:	50 e0       	ldi	r21, 0x00	; 0
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3],
		CONTROL_DBK[0],
		CONTROL_DBK[1]};
 174:	da 01       	movw	r26, r20
 176:	6c 91       	ld	r22, X
 178:	6c 83       	std	Y+4, r22	; 0x04
 17a:	11 96       	adiw	r26, 0x01	; 1
 17c:	4c 91       	ld	r20, X
 17e:	4d 83       	std	Y+5, r20	; 0x05
 180:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <DIAG_DBK>
 184:	4e 83       	std	Y+6, r20	; 0x06
 186:	40 81       	ld	r20, Z
 188:	4f 83       	std	Y+7, r20	; 0x07
 18a:	41 81       	ldd	r20, Z+1	; 0x01
 18c:	48 87       	std	Y+8, r20	; 0x08
 18e:	42 81       	ldd	r20, Z+2	; 0x02
 190:	49 87       	std	Y+9, r20	; 0x09
 192:	43 81       	ldd	r20, Z+3	; 0x03
 194:	4a 87       	std	Y+10, r20	; 0x0a
 196:	44 81       	ldd	r20, Z+4	; 0x04
 198:	4b 87       	std	Y+11, r20	; 0x0b
 19a:	45 81       	ldd	r20, Z+5	; 0x05
 19c:	4c 87       	std	Y+12, r20	; 0x0c
 19e:	f7 01       	movw	r30, r14
 1a0:	40 81       	ld	r20, Z
 1a2:	4d 87       	std	Y+13, r20	; 0x0d
 1a4:	41 81       	ldd	r20, Z+1	; 0x01
 1a6:	4e 87       	std	Y+14, r20	; 0x0e
 1a8:	42 81       	ldd	r20, Z+2	; 0x02
 1aa:	4f 87       	std	Y+15, r20	; 0x0f
 1ac:	43 81       	ldd	r20, Z+3	; 0x03
 1ae:	48 8b       	std	Y+16, r20	; 0x10
 1b0:	d9 01       	movw	r26, r18
 1b2:	4c 91       	ld	r20, X
 1b4:	49 8b       	std	Y+17, r20	; 0x11
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	2c 91       	ld	r18, X
 1ba:	2a 8b       	std	Y+18, r18	; 0x12
	UART_SendString(tmp_tx_data);
 1bc:	84 df       	rcall	.-248    	; 0xc6 <_Z15UART_SendStringPh>
}
 1be:	62 96       	adiw	r28, 0x12	; 18
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <__vector_11>:

ISR(USART_RXC_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	unsigned char status, data; //
	status = UCSRA;
 1f6:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
 1f8:	9c b1       	in	r25, 0x0c	; 12
	if ((status & (FRAMING_ERROR | DATA_OVERRUN))==0)
 1fa:	88 71       	andi	r24, 0x18	; 24
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_11+0x28>
 1fe:	72 c0       	rjmp	.+228    	; 0x2e4 <__vector_11+0x10c>
	{
		if ((ex_rx_enable == false) && (data == USART_STARTPACKET))	// Получение стартового пакета
 200:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ex_rx_enable>
 204:	81 11       	cpse	r24, r1
 206:	62 c0       	rjmp	.+196    	; 0x2cc <__vector_11+0xf4>
 208:	91 11       	cpse	r25, r1
 20a:	6c c0       	rjmp	.+216    	; 0x2e4 <__vector_11+0x10c>
		{
			// Очистка переменных буфера для приема нового пакета
			memset(ex_rx_buffer_ADRESS_DBK, 0, sizeof(ex_rx_buffer_ADRESS_DBK));
 20c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ex_rx_buffer_ADRESS_DBK+0x1>
 210:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ex_rx_buffer_ADRESS_DBK>
			memset(ex_rx_buffer_DIEN_DBK, 0, sizeof(ex_rx_buffer_DIEN_DBK));
 214:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ex_rx_buffer_DIEN_DBK+0x1>
 218:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ex_rx_buffer_DIEN_DBK>
			ex_rx_buffer_DIAG_DBK = 0;
 21c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ex_rx_buffer_DIAG_DBK>
			memset(ex_rx_buffer_DAN_DBK, 0, sizeof(ex_rx_buffer_DAN_DBK));
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	e9 e6       	ldi	r30, 0x69	; 105
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	df 01       	movw	r26, r30
 228:	1d 92       	st	X+, r1
 22a:	8a 95       	dec	r24
 22c:	e9 f7       	brne	.-6      	; 0x228 <__vector_11+0x50>
			memset(ex_rx_buffer_DATA_DBK, 0, sizeof(ex_rx_buffer_DATA_DBK));
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	e5 e6       	ldi	r30, 0x65	; 101
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	df 01       	movw	r26, r30
 236:	1d 92       	st	X+, r1
 238:	8a 95       	dec	r24
 23a:	e9 f7       	brne	.-6      	; 0x236 <__vector_11+0x5e>
			memset(ex_rx_buffer_CONTROL_DBK, 0, sizeof(ex_rx_buffer_CONTROL_DBK));
 23c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ex_rx_buffer_CONTROL_DBK+0x1>
 240:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ex_rx_buffer_CONTROL_DBK>
			//
			ex_rx_index=0;
			ex_rx_enable = true;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ex_rx_enable>
			ex_rx_data_complite = false;
 24a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (ex_rx_enable == 1)	// Получение информации
		{
			switch (ex_rx_index)
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	32 c0       	rjmp	.+100    	; 0x2b6 <__vector_11+0xde>
			{
				case 1:
				ex_rx_buffer_ADRESS_DBK[ex_rx_index - 1] = data;
 252:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <ex_rx_buffer_ADRESS_DBK>
				break;
 256:	2f c0       	rjmp	.+94     	; 0x2b6 <__vector_11+0xde>
				case 2:
				ex_rx_buffer_ADRESS_DBK[ex_rx_index - 1] = data;
 258:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ex_rx_buffer_ADRESS_DBK+0x1>
				break;
 25c:	2c c0       	rjmp	.+88     	; 0x2b6 <__vector_11+0xde>
				case 3:
				ex_rx_buffer_DIEN_DBK[ex_rx_index - 3] = data;
 25e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ex_rx_buffer_DIEN_DBK>
				break;
 262:	29 c0       	rjmp	.+82     	; 0x2b6 <__vector_11+0xde>
				case 4:
				ex_rx_buffer_DIEN_DBK[ex_rx_index - 3] = data;
 264:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ex_rx_buffer_DIEN_DBK+0x1>
				break;
 268:	26 c0       	rjmp	.+76     	; 0x2b6 <__vector_11+0xde>
				case 5:
				ex_rx_buffer_DIAG_DBK = data;
 26a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ex_rx_buffer_DIAG_DBK>
				break;
 26e:	23 c0       	rjmp	.+70     	; 0x2b6 <__vector_11+0xde>
				case 6:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 270:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ex_rx_buffer_DAN_DBK>
				break;
 274:	20 c0       	rjmp	.+64     	; 0x2b6 <__vector_11+0xde>
				case 7:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 276:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <ex_rx_buffer_DAN_DBK+0x1>
				break;
 27a:	1d c0       	rjmp	.+58     	; 0x2b6 <__vector_11+0xde>
				case 8:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 27c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ex_rx_buffer_DAN_DBK+0x2>
				break;
 280:	1a c0       	rjmp	.+52     	; 0x2b6 <__vector_11+0xde>
				case 9:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 282:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ex_rx_buffer_DAN_DBK+0x3>
				break;
 286:	17 c0       	rjmp	.+46     	; 0x2b6 <__vector_11+0xde>
				case 10:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 288:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <ex_rx_buffer_DAN_DBK+0x4>
				break;
 28c:	14 c0       	rjmp	.+40     	; 0x2b6 <__vector_11+0xde>
				case 11:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 28e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ex_rx_buffer_DAN_DBK+0x5>
				break;
 292:	11 c0       	rjmp	.+34     	; 0x2b6 <__vector_11+0xde>
				case 12:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 294:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ex_rx_buffer_DATA_DBK>
				break;
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <__vector_11+0xde>
				case 13:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 29a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ex_rx_buffer_DATA_DBK+0x1>
				break;
 29e:	0b c0       	rjmp	.+22     	; 0x2b6 <__vector_11+0xde>
				case 14:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 2a0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ex_rx_buffer_DATA_DBK+0x2>
				break;
 2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <__vector_11+0xde>
				case 15:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 2a6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <ex_rx_buffer_DATA_DBK+0x3>
				break;
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_11+0xde>
				case 16:
				ex_rx_buffer_CONTROL_DBK[ex_rx_index - 16] = data;
 2ac:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ex_rx_buffer_CONTROL_DBK>
				break;
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__vector_11+0xde>
				case 17:
				ex_rx_buffer_CONTROL_DBK[ex_rx_index - 16] = data;
 2b2:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <ex_rx_buffer_CONTROL_DBK+0x1>
				break;
			}
			++ex_rx_index;
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ex_rx_index>
		}
		if ( (ex_rx_index >= RX_BUFFER_SIZE) && (ex_rx_enable == 1) )	// Прием окончен
 2bc:	82 31       	cpi	r24, 0x12	; 18
 2be:	90 f0       	brcs	.+36     	; 0x2e4 <__vector_11+0x10c>
		{
			ex_rx_enable = 0;
 2c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ex_rx_enable>
			ex_rx_data_complite = true;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
}
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <__vector_11+0x10c>
			ex_rx_enable = true;
			ex_rx_data_complite = false;
		}
		if (ex_rx_enable == 1)	// Получение информации
		{
			switch (ex_rx_index)
 2cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ex_rx_index>
 2d0:	48 2f       	mov	r20, r24
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	fa 01       	movw	r30, r20
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	e1 31       	cpi	r30, 0x11	; 17
 2da:	f1 05       	cpc	r31, r1
 2dc:	60 f7       	brcc	.-40     	; 0x2b6 <__vector_11+0xde>
 2de:	ed 5e       	subi	r30, 0xED	; 237
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	09 94       	ijmp
		{
			ex_rx_enable = 0;
			ex_rx_data_complite = true;
		}
	}
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <_Z9CRC_contrPhS_hS_S_S_>:
void CRC_contr(unsigned char ADR_DBK[2], unsigned char DIEN_DBK[2], unsigned char DIAG_DBK, unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	2f 97       	sbiw	r28, 0x0f	; 15
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	6c 01       	movw	r12, r24
 324:	f9 01       	movw	r30, r18
		DAN_DBK[5],
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3]
	};
 326:	dc 01       	movw	r26, r24
 328:	8c 91       	ld	r24, X
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	11 96       	adiw	r26, 0x01	; 1
 32e:	8c 91       	ld	r24, X
 330:	8a 83       	std	Y+2, r24	; 0x02
 332:	db 01       	movw	r26, r22
 334:	8c 91       	ld	r24, X
 336:	8b 83       	std	Y+3, r24	; 0x03
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	8c 91       	ld	r24, X
 33c:	8c 83       	std	Y+4, r24	; 0x04
 33e:	4d 83       	std	Y+5, r20	; 0x05
 340:	80 81       	ld	r24, Z
 342:	8e 83       	std	Y+6, r24	; 0x06
 344:	81 81       	ldd	r24, Z+1	; 0x01
 346:	8f 83       	std	Y+7, r24	; 0x07
 348:	82 81       	ldd	r24, Z+2	; 0x02
 34a:	88 87       	std	Y+8, r24	; 0x08
 34c:	83 81       	ldd	r24, Z+3	; 0x03
 34e:	89 87       	std	Y+9, r24	; 0x09
 350:	84 81       	ldd	r24, Z+4	; 0x04
 352:	8a 87       	std	Y+10, r24	; 0x0a
 354:	85 81       	ldd	r24, Z+5	; 0x05
 356:	8b 87       	std	Y+11, r24	; 0x0b
 358:	f8 01       	movw	r30, r16
 35a:	80 81       	ld	r24, Z
 35c:	8c 87       	std	Y+12, r24	; 0x0c
 35e:	81 81       	ldd	r24, Z+1	; 0x01
 360:	8d 87       	std	Y+13, r24	; 0x0d
 362:	82 81       	ldd	r24, Z+2	; 0x02
 364:	8e 87       	std	Y+14, r24	; 0x0e
 366:	83 81       	ldd	r24, Z+3	; 0x03
 368:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned char len = 15;
	unsigned char ex_rx_CONTROL_DBK[2] = {0x00, 0x00};
	unsigned short crc16 = crc16_common(crc, len);
 36a:	6f e0       	ldi	r22, 0x0F	; 15
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	c7 de       	rcall	.-626    	; 0x100 <_Z12crc16_commonPhh>
	ex_rx_CONTROL_DBK[0] = (crc16 & 0xFF00) >> 8;
	ex_rx_CONTROL_DBK[1] = (crc16 & 0x00FF);
	if ((CONTROL_DBK[0] == ex_rx_CONTROL_DBK[0]) && (CONTROL_DBK[1] == ex_rx_CONTROL_DBK[1]))
 372:	d7 01       	movw	r26, r14
 374:	2c 91       	ld	r18, X
 376:	29 13       	cpse	r18, r25
 378:	13 c0       	rjmp	.+38     	; 0x3a0 <_Z9CRC_contrPhS_hS_S_S_+0x9e>
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	9c 91       	ld	r25, X
 37e:	98 13       	cpse	r25, r24
 380:	0f c0       	rjmp	.+30     	; 0x3a0 <_Z9CRC_contrPhS_hS_S_S_+0x9e>
	{
		LEDLAMP_ON(1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	71 de       	rcall	.-798    	; 0x6a <_Z10LEDLAMP_ONj>
		//_delay_ms(500);
		LEDLAMP_OFF(1);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	79 de       	rcall	.-782    	; 0x80 <_Z11LEDLAMP_OFFj>
		if ((ADR_DBK[0] == 0x01) && ADR_DBK[1] == 0x5E) // Активация устройства
 38e:	f6 01       	movw	r30, r12
 390:	80 81       	ld	r24, Z
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	29 f4       	brne	.+10     	; 0x3a0 <_Z9CRC_contrPhS_hS_S_S_+0x9e>
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	8e 35       	cpi	r24, 0x5E	; 94
 39a:	11 f4       	brne	.+4      	; 0x3a0 <_Z9CRC_contrPhS_hS_S_S_+0x9e>
		{
			OCR2=0x7F;
 39c:	8f e7       	ldi	r24, 0x7F	; 127
 39e:	83 bd       	out	0x23, r24	; 35
		}
	}
}
 3a0:	2f 96       	adiw	r28, 0x0f	; 15
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <_Z12ExchangeUARTPhS_S_S_>:
void ExchangeUART(unsigned char ADR_DBK[2], unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{	
 3be:	f9 01       	movw	r30, r18
	if ((ADR_DBK[0] == 0x01) && ADR_DBK[1] == 0x5E) // Активация устройства
 3c0:	dc 01       	movw	r26, r24
 3c2:	3c 91       	ld	r19, X
 3c4:	31 30       	cpi	r19, 0x01	; 1
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <_Z12ExchangeUARTPhS_S_S_+0x16>
 3c8:	11 96       	adiw	r26, 0x01	; 1
 3ca:	2c 91       	ld	r18, X
 3cc:	2e 35       	cpi	r18, 0x5E	; 94
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <_Z12ExchangeUARTPhS_S_S_+0x16>
 3d0:	9f 01       	movw	r18, r30
	{
		USART_SendPacket(ADR_DBK, DAN_DBK, DATA_DBK, CONTROL_DBK);
 3d2:	b0 de       	rcall	.-672    	; 0x134 <_Z16USART_SendPacketPhS_S_S_>
 3d4:	08 95       	ret

000003d6 <main>:
	}
}
int main(void)
{
	PWM_INIT();
 3d6:	60 de       	rcall	.-832    	; 0x98 <_Z8PWM_INITv>
	UART_Init(8); //115200
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	67 de       	rcall	.-818    	; 0xac <_Z9UART_Initj>
	DDRD |= ( 1 << PD3);	// порт на выход
 3de:	8b 9a       	sbi	0x11, 3	; 17
	RS485_RS; // Установить RE DE в 0. Прием
 3e0:	93 98       	cbi	0x12, 3	; 18
	DDRC |= ( 1 << PC0) | ( 1 << PC1); // порт на выход
 3e2:	84 b3       	in	r24, 0x14	; 20
 3e4:	83 60       	ori	r24, 0x03	; 3
 3e6:	84 bb       	out	0x14, r24	; 20
	sei();
 3e8:	78 94       	sei
	while(1)
    {
		CRC_contr(ex_rx_buffer_ADRESS_DBK, ex_rx_buffer_DIEN_DBK, ex_rx_buffer_DIAG_DBK, ex_rx_buffer_DAN_DBK, ex_rx_buffer_DATA_DBK, ex_rx_buffer_CONTROL_DBK);
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f3 e6       	ldi	r31, 0x63	; 99
 3ee:	ef 2e       	mov	r14, r31
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	ff 2e       	mov	r15, r31
 3f4:	f0 2d       	mov	r31, r0
 3f6:	05 e6       	ldi	r16, 0x65	; 101
 3f8:	10 e0       	ldi	r17, 0x00	; 0
 3fa:	29 e6       	ldi	r18, 0x69	; 105
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <ex_rx_buffer_DIAG_DBK>
 402:	60 e7       	ldi	r22, 0x70	; 112
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	82 e7       	ldi	r24, 0x72	; 114
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	7b df       	rcall	.-266    	; 0x302 <_Z9CRC_contrPhS_hS_S_S_>
		if (ex_rx_data_complite)
 40c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 410:	88 23       	and	r24, r24
 412:	59 f3       	breq	.-42     	; 0x3ea <main+0x14>
		{
			ex_rx_data_complite = false;
 414:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			ExchangeUART(ex_rx_buffer_ADRESS_DBK, ex_rx_buffer_DAN_DBK, ex_rx_buffer_DATA_DBK, ex_rx_buffer_CONTROL_DBK);
 418:	97 01       	movw	r18, r14
 41a:	a8 01       	movw	r20, r16
 41c:	69 e6       	ldi	r22, 0x69	; 105
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	82 e7       	ldi	r24, 0x72	; 114
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	cc df       	rcall	.-104    	; 0x3be <_Z12ExchangeUARTPhS_S_S_>
 426:	e1 cf       	rjmp	.-62     	; 0x3ea <main+0x14>

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>

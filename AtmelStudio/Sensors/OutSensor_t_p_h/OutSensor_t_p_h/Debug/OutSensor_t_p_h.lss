
OutSensor_t_p_h.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc9  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000698  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055a  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cf  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000761  00000000  00000000  00002473  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	d6 c0       	rjmp	.+428    	; 0x1c4 <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	5d c0       	rjmp	.+186    	; 0xd6 <__vector_13>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	22 c0       	rjmp	.+68     	; 0x68 <__bad_interrupt>
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	0b c1       	rjmp	.+534    	; 0x23e <__vector_11+0x7a>
  28:	0d c1       	rjmp	.+538    	; 0x244 <__vector_11+0x80>
  2a:	0f c1       	rjmp	.+542    	; 0x24a <__vector_11+0x86>
  2c:	11 c1       	rjmp	.+546    	; 0x250 <__vector_11+0x8c>
  2e:	13 c1       	rjmp	.+550    	; 0x256 <__vector_11+0x92>
  30:	15 c1       	rjmp	.+554    	; 0x25c <__vector_11+0x98>
  32:	17 c1       	rjmp	.+558    	; 0x262 <__vector_11+0x9e>
  34:	19 c1       	rjmp	.+562    	; 0x268 <__vector_11+0xa4>
  36:	1b c1       	rjmp	.+566    	; 0x26e <__vector_11+0xaa>
  38:	1d c1       	rjmp	.+570    	; 0x274 <__vector_11+0xb0>
  3a:	1f c1       	rjmp	.+574    	; 0x27a <__vector_11+0xb6>
  3c:	21 c1       	rjmp	.+578    	; 0x280 <__vector_11+0xbc>
  3e:	23 c1       	rjmp	.+582    	; 0x286 <__vector_11+0xc2>
  40:	25 c1       	rjmp	.+586    	; 0x28c <__vector_11+0xc8>
  42:	27 c1       	rjmp	.+590    	; 0x292 <__vector_11+0xce>
  44:	29 c1       	rjmp	.+594    	; 0x298 <__vector_11+0xd4>
  46:	2b c1       	rjmp	.+598    	; 0x29e <__vector_11+0xda>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf e5       	ldi	r28, 0x5F	; 95
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a0 e6       	ldi	r26, 0x60	; 96
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a7 37       	cpi	r26, 0x77	; 119
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	a9 d1       	rcall	.+850    	; 0x3b8 <main>
  66:	d6 c1       	rjmp	.+940    	; 0x414 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <_Z10LEDLAMP_ONj>:
bool ex_rx_enable = false;
bool ex_rx_data_complite = false;
// LED ON
void LEDLAMP_ON(unsigned int n_pin)
{
	PORTC |= ( 1 << n_pin );
  6a:	95 b3       	in	r25, 0x15	; 21
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	02 c0       	rjmp	.+4      	; 0x76 <_Z10LEDLAMP_ONj+0xc>
  72:	22 0f       	add	r18, r18
  74:	33 1f       	adc	r19, r19
  76:	8a 95       	dec	r24
  78:	e2 f7       	brpl	.-8      	; 0x72 <_Z10LEDLAMP_ONj+0x8>
  7a:	29 2b       	or	r18, r25
  7c:	25 bb       	out	0x15, r18	; 21
  7e:	08 95       	ret

00000080 <_Z11LEDLAMP_OFFj>:
}
// LED OFF
void LEDLAMP_OFF(unsigned int n_pin)
{
	PORTC &= ~( 1 << n_pin );
  80:	95 b3       	in	r25, 0x15	; 21
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <_Z11LEDLAMP_OFFj+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <_Z11LEDLAMP_OFFj+0x8>
  90:	20 95       	com	r18
  92:	29 23       	and	r18, r25
  94:	25 bb       	out	0x15, r18	; 21
  96:	08 95       	ret

00000098 <_Z9UART_Initj>:
}

void UART_Init (unsigned int speed)
{
	// Устанавливаем скорость Baud Rate
	UBRRH = (unsigned char)( speed >> 8 );
  98:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) speed;
  9a:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X); // Удвоение частоты
  9c:	59 9a       	sbi	0x0b, 1	; 11
	
	// Разрешение работы передатчика
	UCSRB = ( 1 << TXEN ) | ( 1 << RXEN ) | (1 << RXCIE ) | (1 << TXCIE );
  9e:	88 ed       	ldi	r24, 0xD8	; 216
  a0:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  a2:	8e e8       	ldi	r24, 0x8E	; 142
  a4:	80 bd       	out	0x20, r24	; 32
  a6:	08 95       	ret

000000a8 <_Z14UART_Send_Charh>:
}

// Send to UART
void UART_Send_Char (unsigned char data_tx)////
{
	while ( !( UCSRA & (1<<5)) ) {}
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <_Z14UART_Send_Charh>
	RS485_TR;
  ac:	93 9a       	sbi	0x12, 3	; 18
	UDR = data_tx;
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

000000b2 <_Z15UART_SendStringPh>:
}

// Send to UART
void UART_SendString (unsigned char data_tx[])
{
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	8c 01       	movw	r16, r24
  be:	0e 5e       	subi	r16, 0xEE	; 238
  c0:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for (i=0; i < RX_BUFFER_SIZE; i++) {
		UART_Send_Char(data_tx[i]);
  c2:	89 91       	ld	r24, Y+
  c4:	f1 df       	rcall	.-30     	; 0xa8 <_Z14UART_Send_Charh>

// Send to UART
void UART_SendString (unsigned char data_tx[])
{
	int i;
	for (i=0; i < RX_BUFFER_SIZE; i++) {
  c6:	c0 17       	cp	r28, r16
  c8:	d1 07       	cpc	r29, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <_Z15UART_SendStringPh+0x10>
		UART_Send_Char(data_tx[i]);
	}
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <__vector_13>:

ISR(USART_TXC_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
	RS485_RS; // Установить RE DE в 0. Прием
  e0:	93 98       	cbi	0x12, 3	; 18
}
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_Z12crc16_commonPhh>:

unsigned short crc16_common(unsigned char* data, unsigned char len)
{
  ec:	fc 01       	movw	r30, r24
  ee:	ac 01       	movw	r20, r24
  f0:	46 0f       	add	r20, r22
  f2:	51 1d       	adc	r21, r1
	unsigned char y;
	unsigned short crc;
	crc = 0x0000;
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
	while (len--)
  f8:	e4 17       	cp	r30, r20
  fa:	f5 07       	cpc	r31, r21
  fc:	81 f0       	breq	.+32     	; 0x11e <_Z12crc16_commonPhh+0x32>
	{
		crc = ((unsigned short)*data++ << 8) ^ crc;
  fe:	21 91       	ld	r18, Z+
 100:	92 27       	eor	r25, r18
 102:	28 e0       	ldi	r18, 0x08	; 8
		for (y = 0; y < 8; y++)
		{
			if (crc & 0x8000)
 104:	99 23       	and	r25, r25
 106:	34 f4       	brge	.+12     	; 0x114 <_Z12crc16_commonPhh+0x28>
			crc = (crc << 1) ^ (0x8005);
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	35 e0       	ldi	r19, 0x05	; 5
 10e:	83 27       	eor	r24, r19
 110:	90 58       	subi	r25, 0x80	; 128
 112:	02 c0       	rjmp	.+4      	; 0x118 <_Z12crc16_commonPhh+0x2c>
			else
			crc = crc << 1;
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	21 50       	subi	r18, 0x01	; 1
	unsigned short crc;
	crc = 0x0000;
	while (len--)
	{
		crc = ((unsigned short)*data++ << 8) ^ crc;
		for (y = 0; y < 8; y++)
 11a:	a1 f7       	brne	.-24     	; 0x104 <_Z12crc16_commonPhh+0x18>
 11c:	ed cf       	rjmp	.-38     	; 0xf8 <_Z12crc16_commonPhh+0xc>
			else
			crc = crc << 1;
		}
	}
	return crc;
}
 11e:	08 95       	ret

00000120 <_Z16USART_SendPacketPhS_S_S_>:

void USART_SendPacket(unsigned char ADR_DBK[2], unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	62 97       	sbiw	r28, 0x12	; 18
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	8c 01       	movw	r16, r24
 13e:	fb 01       	movw	r30, r22
 140:	7a 01       	movw	r14, r20
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3],
		CONTROL_DBK[0],
		CONTROL_DBK[1]};
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	42 e1       	ldi	r20, 0x12	; 18
 148:	dc 01       	movw	r26, r24
 14a:	1d 92       	st	X+, r1
 14c:	4a 95       	dec	r20
 14e:	e9 f7       	brne	.-6      	; 0x14a <_Z16USART_SendPacketPhS_S_S_+0x2a>
 150:	d8 01       	movw	r26, r16
 152:	4c 91       	ld	r20, X
 154:	4a 83       	std	Y+2, r20	; 0x02
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	4c 91       	ld	r20, X
 15a:	4b 83       	std	Y+3, r20	; 0x03
{
	unsigned char tmp_tx_data[RX_BUFFER_SIZE] = {
		USART_STARTPACKET,
		ADR_DBK[0],
		ADR_DBK[1],
		DIEN_DBK[0],
 15c:	45 e7       	ldi	r20, 0x75	; 117
 15e:	50 e0       	ldi	r21, 0x00	; 0
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3],
		CONTROL_DBK[0],
		CONTROL_DBK[1]};
 160:	da 01       	movw	r26, r20
 162:	6c 91       	ld	r22, X
 164:	6c 83       	std	Y+4, r22	; 0x04
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	4c 91       	ld	r20, X
 16a:	4d 83       	std	Y+5, r20	; 0x05
 16c:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <DIAG_DBK>
 170:	4e 83       	std	Y+6, r20	; 0x06
 172:	40 81       	ld	r20, Z
 174:	4f 83       	std	Y+7, r20	; 0x07
 176:	41 81       	ldd	r20, Z+1	; 0x01
 178:	48 87       	std	Y+8, r20	; 0x08
 17a:	42 81       	ldd	r20, Z+2	; 0x02
 17c:	49 87       	std	Y+9, r20	; 0x09
 17e:	43 81       	ldd	r20, Z+3	; 0x03
 180:	4a 87       	std	Y+10, r20	; 0x0a
 182:	44 81       	ldd	r20, Z+4	; 0x04
 184:	4b 87       	std	Y+11, r20	; 0x0b
 186:	45 81       	ldd	r20, Z+5	; 0x05
 188:	4c 87       	std	Y+12, r20	; 0x0c
 18a:	f7 01       	movw	r30, r14
 18c:	40 81       	ld	r20, Z
 18e:	4d 87       	std	Y+13, r20	; 0x0d
 190:	41 81       	ldd	r20, Z+1	; 0x01
 192:	4e 87       	std	Y+14, r20	; 0x0e
 194:	42 81       	ldd	r20, Z+2	; 0x02
 196:	4f 87       	std	Y+15, r20	; 0x0f
 198:	43 81       	ldd	r20, Z+3	; 0x03
 19a:	48 8b       	std	Y+16, r20	; 0x10
 19c:	d9 01       	movw	r26, r18
 19e:	4c 91       	ld	r20, X
 1a0:	49 8b       	std	Y+17, r20	; 0x11
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	2c 91       	ld	r18, X
 1a6:	2a 8b       	std	Y+18, r18	; 0x12
	UART_SendString(tmp_tx_data);
 1a8:	84 df       	rcall	.-248    	; 0xb2 <_Z15UART_SendStringPh>
}
 1aa:	62 96       	adiw	r28, 0x12	; 18
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <__vector_11>:

ISR(USART_RXC_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	unsigned char status, data; //
	status = UCSRA;
 1e2:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
 1e4:	9c b1       	in	r25, 0x0c	; 12
	if ((status & (FRAMING_ERROR | DATA_OVERRUN))==0)
 1e6:	88 71       	andi	r24, 0x18	; 24
 1e8:	09 f0       	breq	.+2      	; 0x1ec <__vector_11+0x28>
 1ea:	72 c0       	rjmp	.+228    	; 0x2d0 <__vector_11+0x10c>
	{
		if ((ex_rx_enable == false) && (data == USART_STARTPACKET))	// Получение стартового пакета
 1ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ex_rx_enable>
 1f0:	81 11       	cpse	r24, r1
 1f2:	62 c0       	rjmp	.+196    	; 0x2b8 <__vector_11+0xf4>
 1f4:	91 11       	cpse	r25, r1
 1f6:	6c c0       	rjmp	.+216    	; 0x2d0 <__vector_11+0x10c>
		{
			// Очистка переменных буфера для приема нового пакета
			memset(ex_rx_buffer_ADRESS_DBK, 0, sizeof(ex_rx_buffer_ADRESS_DBK));
 1f8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ex_rx_buffer_ADRESS_DBK+0x1>
 1fc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ex_rx_buffer_ADRESS_DBK>
			memset(ex_rx_buffer_DIEN_DBK, 0, sizeof(ex_rx_buffer_DIEN_DBK));
 200:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ex_rx_buffer_DIEN_DBK+0x1>
 204:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ex_rx_buffer_DIEN_DBK>
			ex_rx_buffer_DIAG_DBK = 0;
 208:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ex_rx_buffer_DIAG_DBK>
			memset(ex_rx_buffer_DAN_DBK, 0, sizeof(ex_rx_buffer_DAN_DBK));
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	e9 e6       	ldi	r30, 0x69	; 105
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	df 01       	movw	r26, r30
 214:	1d 92       	st	X+, r1
 216:	8a 95       	dec	r24
 218:	e9 f7       	brne	.-6      	; 0x214 <__vector_11+0x50>
			memset(ex_rx_buffer_DATA_DBK, 0, sizeof(ex_rx_buffer_DATA_DBK));
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	e5 e6       	ldi	r30, 0x65	; 101
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	df 01       	movw	r26, r30
 222:	1d 92       	st	X+, r1
 224:	8a 95       	dec	r24
 226:	e9 f7       	brne	.-6      	; 0x222 <__vector_11+0x5e>
			memset(ex_rx_buffer_CONTROL_DBK, 0, sizeof(ex_rx_buffer_CONTROL_DBK));
 228:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ex_rx_buffer_CONTROL_DBK+0x1>
 22c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ex_rx_buffer_CONTROL_DBK>
			//
			ex_rx_index=0;
			ex_rx_enable = true;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ex_rx_enable>
			ex_rx_data_complite = false;
 236:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (ex_rx_enable == 1)	// Получение информации
		{
			switch (ex_rx_index)
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	32 c0       	rjmp	.+100    	; 0x2a2 <__vector_11+0xde>
			{
				case 1:
				ex_rx_buffer_ADRESS_DBK[ex_rx_index - 1] = data;
 23e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <ex_rx_buffer_ADRESS_DBK>
				break;
 242:	2f c0       	rjmp	.+94     	; 0x2a2 <__vector_11+0xde>
				case 2:
				ex_rx_buffer_ADRESS_DBK[ex_rx_index - 1] = data;
 244:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ex_rx_buffer_ADRESS_DBK+0x1>
				break;
 248:	2c c0       	rjmp	.+88     	; 0x2a2 <__vector_11+0xde>
				case 3:
				ex_rx_buffer_DIEN_DBK[ex_rx_index - 3] = data;
 24a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ex_rx_buffer_DIEN_DBK>
				break;
 24e:	29 c0       	rjmp	.+82     	; 0x2a2 <__vector_11+0xde>
				case 4:
				ex_rx_buffer_DIEN_DBK[ex_rx_index - 3] = data;
 250:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ex_rx_buffer_DIEN_DBK+0x1>
				break;
 254:	26 c0       	rjmp	.+76     	; 0x2a2 <__vector_11+0xde>
				case 5:
				ex_rx_buffer_DIAG_DBK = data;
 256:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ex_rx_buffer_DIAG_DBK>
				break;
 25a:	23 c0       	rjmp	.+70     	; 0x2a2 <__vector_11+0xde>
				case 6:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 25c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ex_rx_buffer_DAN_DBK>
				break;
 260:	20 c0       	rjmp	.+64     	; 0x2a2 <__vector_11+0xde>
				case 7:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 262:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <ex_rx_buffer_DAN_DBK+0x1>
				break;
 266:	1d c0       	rjmp	.+58     	; 0x2a2 <__vector_11+0xde>
				case 8:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 268:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ex_rx_buffer_DAN_DBK+0x2>
				break;
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <__vector_11+0xde>
				case 9:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 26e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ex_rx_buffer_DAN_DBK+0x3>
				break;
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <__vector_11+0xde>
				case 10:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 274:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <ex_rx_buffer_DAN_DBK+0x4>
				break;
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <__vector_11+0xde>
				case 11:
				ex_rx_buffer_DAN_DBK[ex_rx_index - 6] = data;
 27a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ex_rx_buffer_DAN_DBK+0x5>
				break;
 27e:	11 c0       	rjmp	.+34     	; 0x2a2 <__vector_11+0xde>
				case 12:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 280:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ex_rx_buffer_DATA_DBK>
				break;
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <__vector_11+0xde>
				case 13:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 286:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ex_rx_buffer_DATA_DBK+0x1>
				break;
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <__vector_11+0xde>
				case 14:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 28c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ex_rx_buffer_DATA_DBK+0x2>
				break;
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <__vector_11+0xde>
				case 15:
				ex_rx_buffer_DATA_DBK[ex_rx_index - 12] = data;
 292:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <ex_rx_buffer_DATA_DBK+0x3>
				break;
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_11+0xde>
				case 16:
				ex_rx_buffer_CONTROL_DBK[ex_rx_index - 16] = data;
 298:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ex_rx_buffer_CONTROL_DBK>
				break;
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__vector_11+0xde>
				case 17:
				ex_rx_buffer_CONTROL_DBK[ex_rx_index - 16] = data;
 29e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <ex_rx_buffer_CONTROL_DBK+0x1>
				break;
			}
			++ex_rx_index;
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ex_rx_index>
		}
		if ( (ex_rx_index >= RX_BUFFER_SIZE) && (ex_rx_enable == 1) )	// Прием окончен
 2a8:	82 31       	cpi	r24, 0x12	; 18
 2aa:	90 f0       	brcs	.+36     	; 0x2d0 <__vector_11+0x10c>
		{
			ex_rx_enable = 0;
 2ac:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ex_rx_enable>
			ex_rx_data_complite = true;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
}
 2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <__vector_11+0x10c>
			ex_rx_enable = true;
			ex_rx_data_complite = false;
		}
		if (ex_rx_enable == 1)	// Получение информации
		{
			switch (ex_rx_index)
 2b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ex_rx_index>
 2bc:	48 2f       	mov	r20, r24
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	fa 01       	movw	r30, r20
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	e1 31       	cpi	r30, 0x11	; 17
 2c6:	f1 05       	cpc	r31, r1
 2c8:	60 f7       	brcc	.-40     	; 0x2a2 <__vector_11+0xde>
 2ca:	ed 5e       	subi	r30, 0xED	; 237
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	09 94       	ijmp
		{
			ex_rx_enable = 0;
			ex_rx_data_complite = true;
		}
	}
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <_Z9CRC_contrPhS_hS_S_S_>:
void CRC_contr(unsigned char ADR_DBK[2], unsigned char DIEN_DBK[2], unsigned char DIAG_DBK, unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	2f 97       	sbiw	r28, 0x0f	; 15
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	f9 01       	movw	r30, r18
		DAN_DBK[5],
		DATA_DBK[0],
		DATA_DBK[1],
		DATA_DBK[2],
		DATA_DBK[3]
	};
 30c:	dc 01       	movw	r26, r24
 30e:	2c 91       	ld	r18, X
 310:	29 83       	std	Y+1, r18	; 0x01
 312:	11 96       	adiw	r26, 0x01	; 1
 314:	8c 91       	ld	r24, X
 316:	8a 83       	std	Y+2, r24	; 0x02
 318:	db 01       	movw	r26, r22
 31a:	8c 91       	ld	r24, X
 31c:	8b 83       	std	Y+3, r24	; 0x03
 31e:	11 96       	adiw	r26, 0x01	; 1
 320:	8c 91       	ld	r24, X
 322:	8c 83       	std	Y+4, r24	; 0x04
 324:	4d 83       	std	Y+5, r20	; 0x05
 326:	80 81       	ld	r24, Z
 328:	8e 83       	std	Y+6, r24	; 0x06
 32a:	81 81       	ldd	r24, Z+1	; 0x01
 32c:	8f 83       	std	Y+7, r24	; 0x07
 32e:	82 81       	ldd	r24, Z+2	; 0x02
 330:	88 87       	std	Y+8, r24	; 0x08
 332:	83 81       	ldd	r24, Z+3	; 0x03
 334:	89 87       	std	Y+9, r24	; 0x09
 336:	84 81       	ldd	r24, Z+4	; 0x04
 338:	8a 87       	std	Y+10, r24	; 0x0a
 33a:	85 81       	ldd	r24, Z+5	; 0x05
 33c:	8b 87       	std	Y+11, r24	; 0x0b
 33e:	f8 01       	movw	r30, r16
 340:	80 81       	ld	r24, Z
 342:	8c 87       	std	Y+12, r24	; 0x0c
 344:	81 81       	ldd	r24, Z+1	; 0x01
 346:	8d 87       	std	Y+13, r24	; 0x0d
 348:	82 81       	ldd	r24, Z+2	; 0x02
 34a:	8e 87       	std	Y+14, r24	; 0x0e
 34c:	83 81       	ldd	r24, Z+3	; 0x03
 34e:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned char len = 15;
	unsigned char ex_rx_CONTROL_DBK[2] = {0x00, 0x00};
	unsigned short crc16 = crc16_common(crc, len);
 350:	6f e0       	ldi	r22, 0x0F	; 15
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	ca de       	rcall	.-620    	; 0xec <_Z12crc16_commonPhh>
	ex_rx_CONTROL_DBK[0] = (crc16 & 0xFF00) >> 8;
	ex_rx_CONTROL_DBK[1] = (crc16 & 0x00FF);
	if ((CONTROL_DBK[0] == ex_rx_CONTROL_DBK[0]) && (CONTROL_DBK[1] == ex_rx_CONTROL_DBK[1]))
 358:	d7 01       	movw	r26, r14
 35a:	2c 91       	ld	r18, X
 35c:	29 13       	cpse	r18, r25
 35e:	13 c0       	rjmp	.+38     	; 0x386 <_Z9CRC_contrPhS_hS_S_S_+0x98>
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	9c 91       	ld	r25, X
 364:	98 13       	cpse	r25, r24
 366:	0f c0       	rjmp	.+30     	; 0x386 <_Z9CRC_contrPhS_hS_S_S_+0x98>
	{
		LEDLAMP_ON(1);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	7e de       	rcall	.-772    	; 0x6a <_Z10LEDLAMP_ONj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	bf ef       	ldi	r27, 0xFF	; 255
 370:	ee e9       	ldi	r30, 0x9E	; 158
 372:	f4 e2       	ldi	r31, 0x24	; 36
 374:	b1 50       	subi	r27, 0x01	; 1
 376:	e0 40       	sbci	r30, 0x00	; 0
 378:	f0 40       	sbci	r31, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <_Z9CRC_contrPhS_hS_S_S_+0x86>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <_Z9CRC_contrPhS_hS_S_S_+0x90>
 37e:	00 00       	nop
		_delay_ms(1500);
		LEDLAMP_OFF(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	7d de       	rcall	.-774    	; 0x80 <_Z11LEDLAMP_OFFj>
	}
}
 386:	2f 96       	adiw	r28, 0x0f	; 15
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	08 95       	ret

000003a0 <_Z12ExchangeUARTPhS_S_S_>:
void ExchangeUART(unsigned char ADR_DBK[2], unsigned char DAN_DBK[6], unsigned char DATA_DBK[4], unsigned char CONTROL_DBK[2])
{
 3a0:	f9 01       	movw	r30, r18
	if ((ADR_DBK[0] == 0x01) && ADR_DBK[1] == 0x5E) // Активация устройства
 3a2:	dc 01       	movw	r26, r24
 3a4:	3c 91       	ld	r19, X
 3a6:	31 30       	cpi	r19, 0x01	; 1
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <_Z12ExchangeUARTPhS_S_S_+0x16>
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	2c 91       	ld	r18, X
 3ae:	2e 35       	cpi	r18, 0x5E	; 94
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <_Z12ExchangeUARTPhS_S_S_+0x16>
 3b2:	9f 01       	movw	r18, r30
	{
		USART_SendPacket(ADR_DBK, DAN_DBK, DATA_DBK, CONTROL_DBK);
 3b4:	b5 de       	rcall	.-662    	; 0x120 <_Z16USART_SendPacketPhS_S_S_>
 3b6:	08 95       	ret

000003b8 <main>:
	}
}
int main(void)
{
	UART_Init(8); //115200
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	6d de       	rcall	.-806    	; 0x98 <_Z9UART_Initj>
	DDRD |= ( 1 << PD3);	// порт на выход
 3be:	8b 9a       	sbi	0x11, 3	; 17
	RS485_RS; // Установить RE DE в 0. Прием
 3c0:	93 98       	cbi	0x12, 3	; 18
	DDRC |= ( 1 << PC0) | ( 1 << PC1); // порт на выход
 3c2:	84 b3       	in	r24, 0x14	; 20
 3c4:	83 60       	ori	r24, 0x03	; 3
 3c6:	84 bb       	out	0x14, r24	; 20
	sei();
 3c8:	78 94       	sei
 3ca:	8f ec       	ldi	r24, 0xCF	; 207
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x16>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x1c>
 3d4:	00 00       	nop
	while(1)
    {
		_delay_ms(1);
		CRC_contr(ex_rx_buffer_ADRESS_DBK, ex_rx_buffer_DIEN_DBK, ex_rx_buffer_DIAG_DBK, ex_rx_buffer_DAN_DBK, ex_rx_buffer_DATA_DBK, ex_rx_buffer_CONTROL_DBK);
 3d6:	0f 2e       	mov	r0, r31
 3d8:	f3 e6       	ldi	r31, 0x63	; 99
 3da:	ef 2e       	mov	r14, r31
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ff 2e       	mov	r15, r31
 3e0:	f0 2d       	mov	r31, r0
 3e2:	05 e6       	ldi	r16, 0x65	; 101
 3e4:	10 e0       	ldi	r17, 0x00	; 0
 3e6:	29 e6       	ldi	r18, 0x69	; 105
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <ex_rx_buffer_DIAG_DBK>
 3ee:	60 e7       	ldi	r22, 0x70	; 112
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	82 e7       	ldi	r24, 0x72	; 114
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	7b df       	rcall	.-266    	; 0x2ee <_Z9CRC_contrPhS_hS_S_S_>
		if (ex_rx_data_complite)
 3f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3fc:	88 23       	and	r24, r24
 3fe:	29 f3       	breq	.-54     	; 0x3ca <main+0x12>
		{
			ex_rx_data_complite = false;
 400:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			ExchangeUART(ex_rx_buffer_ADRESS_DBK, ex_rx_buffer_DAN_DBK, ex_rx_buffer_DATA_DBK, ex_rx_buffer_CONTROL_DBK);
 404:	97 01       	movw	r18, r14
 406:	a8 01       	movw	r20, r16
 408:	69 e6       	ldi	r22, 0x69	; 105
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	82 e7       	ldi	r24, 0x72	; 114
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	c7 df       	rcall	.-114    	; 0x3a0 <_Z12ExchangeUARTPhS_S_S_>
 412:	db cf       	rjmp	.-74     	; 0x3ca <main+0x12>

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>


Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000962  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800076  00800076  00000a0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3c  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070b  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000493  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000579  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cc  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  8a:	0c 94 af 04 	jmp	0x95e	; 0x95e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z10LEDLAMP_ONj>:
bool ex_rx_data_complite = false;

// LED ON
void LEDLAMP_ON(unsigned int n_pin)
{
	PORTC |= ( 1 << n_pin );
  92:	95 b3       	in	r25, 0x15	; 21
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <_Z10LEDLAMP_ONj+0xc>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <_Z10LEDLAMP_ONj+0x8>
  a2:	29 2b       	or	r18, r25
  a4:	25 bb       	out	0x15, r18	; 21
  a6:	08 95       	ret

000000a8 <_Z11LEDLAMP_OFFj>:
}

// LED OFF
void LEDLAMP_OFF(unsigned int n_pin)
{
	PORTC &= ~( 1 << n_pin );
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <_Z11LEDLAMP_OFFj+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <_Z11LEDLAMP_OFFj+0x8>
  b8:	20 95       	com	r18
  ba:	29 23       	and	r18, r25
  bc:	25 bb       	out	0x15, r18	; 21
  be:	08 95       	ret

000000c0 <_Z9UART_Initj>:
}

void UART_Init (unsigned int speed)
{
	// Устанавливаем скорость Baud Rate
	UBRRH = (unsigned char)( speed >> 8 );
  c0:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) speed;
  c2:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X); // Удвоение частоты
  c4:	59 9a       	sbi	0x0b, 1	; 11
	
	// Разрешение работы передатчика
	UCSRB = ( 1 << TXEN ) | ( 1 << RXEN ) | (1 << RXCIE ) | (1 << TXCIE );
  c6:	88 ed       	ldi	r24, 0xD8	; 216
  c8:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  ca:	8e e8       	ldi	r24, 0x8E	; 142
  cc:	80 bd       	out	0x20, r24	; 32
  ce:	08 95       	ret

000000d0 <_Z14UART_Send_Charc>:
}

// Send to UART
void UART_Send_Char (char data_tx) ////
{
	while ( !( UCSRA & (1<<5)) ) {}
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <_Z14UART_Send_Charc>
	RS485_TR;
  d4:	93 9a       	sbi	0x12, 3	; 18
	UDR = data_tx;
  d6:	8c b9       	out	0x0c, r24	; 12
  d8:	08 95       	ret

000000da <_Z15UART_SendStringPc>:
}

// Send to UART
void UART_SendString (char data_tx[])
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
  e4:	8c 01       	movw	r16, r24
  e6:	08 5f       	subi	r16, 0xF8	; 248
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	int len = 8;
	//len = strlen( data_tx );
	for (i=0; i < len; i++) {
		//LEDLAMP_ON(1);
		UART_Send_Char(data_tx[i]);
  ea:	89 91       	ld	r24, Y+
  ec:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z14UART_Send_Charc>
void UART_SendString (char data_tx[])
{
	int i;
	int len = 8;
	//len = strlen( data_tx );
	for (i=0; i < len; i++) {
  f0:	c0 17       	cp	r28, r16
  f2:	d1 07       	cpc	r29, r17
  f4:	d1 f7       	brne	.-12     	; 0xea <_Z15UART_SendStringPc+0x10>
		//LEDLAMP_ON(1);
		UART_Send_Char(data_tx[i]);
		//_delay_ms(50);
		//LEDLAMP_OFF(1);
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <__vector_13>:

ISR(USART_TXC_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
	RS485_RS; // Установить RE DE в 0. Прием
 10a:	93 98       	cbi	0x12, 3	; 18
}
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <_Z16USART_SendPacketPccc>:

void USART_SendPacket(char rx_device_mac[4], char rx_buffer_cmd, char rx_buffer_dat /*char rx_buffer_dat[RX_DATA_SIZE]*/)
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	66 97       	sbiw	r28, 0x16	; 22
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	fc 01       	movw	r30, r24
												rx_device_mac[1],
												rx_device_mac[2],
												rx_device_mac[3],
												rx_buffer_cmd,
												rx_buffer_dat,	
												USART_STOPPACKET);
 130:	1f 92       	push	r1
 132:	8b eb       	ldi	r24, 0xBB	; 187
 134:	8f 93       	push	r24
 136:	1f 92       	push	r1
 138:	8c ec       	ldi	r24, 0xCC	; 204
 13a:	8f 93       	push	r24
 13c:	1f 92       	push	r1
 13e:	6f 93       	push	r22
 140:	83 81       	ldd	r24, Z+3	; 0x03
 142:	1f 92       	push	r1
 144:	8f 93       	push	r24
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	1f 92       	push	r1
 14a:	8f 93       	push	r24
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	1f 92       	push	r1
 150:	8f 93       	push	r24
 152:	80 81       	ld	r24, Z
 154:	1f 92       	push	r1
 156:	8f 93       	push	r24
 158:	1f 92       	push	r1
 15a:	1f 92       	push	r1
 15c:	84 e6       	ldi	r24, 0x64	; 100
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	9f 93       	push	r25
 162:	8f 93       	push	r24
 164:	8e 01       	movw	r16, r28
 166:	0f 5f       	subi	r16, 0xFF	; 255
 168:	1f 4f       	sbci	r17, 0xFF	; 255
 16a:	1f 93       	push	r17
 16c:	0f 93       	push	r16
 16e:	0e 94 c5 01 	call	0x38a	; 0x38a <sprintf>
	//LEDLAMP_ON(1);											
	UART_SendString(tmp_tx_data);
 172:	c8 01       	movw	r24, r16
 174:	0e 94 6d 00 	call	0xda	; 0xda <_Z15UART_SendStringPc>
	//_delay_ms(50);
	//LEDLAMP_OFF(1);
}
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	66 96       	adiw	r28, 0x16	; 22
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <__vector_11>:

ISR(USART_RXC_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	cf 93       	push	r28
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	char status, data; ////
	unsigned char sub_rx_index;
	status = UCSRA;
 1bc:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
 1be:	9c b1       	in	r25, 0x0c	; 12
	if ((status & (FRAMING_ERROR /*| PARITY_ERROR */| DATA_OVERRUN))==0)
 1c0:	88 71       	andi	r24, 0x18	; 24
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <__vector_11+0x2e>
 1c4:	62 c0       	rjmp	.+196    	; 0x28a <__vector_11+0xf2>
	{

		if (data == USART_STARTPACKET)	// Получение стартового пакета
 1c6:	91 11       	cpse	r25, r1
 1c8:	18 c0       	rjmp	.+48     	; 0x1fa <__vector_11+0x62>
		{
			memset(ex_rx_buffer_adr, 0, sizeof(ex_rx_buffer_adr));
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	eb e8       	ldi	r30, 0x8B	; 139
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	df 01       	movw	r26, r30
 1d2:	1d 92       	st	X+, r1
 1d4:	8a 95       	dec	r24
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <__vector_11+0x3a>
			ex_rx_buffer_cmd = 0;
 1d8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <ex_rx_buffer_cmd>
			memset(ex_rx_buffer_dat, 0, sizeof(ex_rx_buffer_dat));
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	ea e7       	ldi	r30, 0x7A	; 122
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	df 01       	movw	r26, r30
 1e4:	1d 92       	st	X+, r1
 1e6:	8a 95       	dec	r24
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <__vector_11+0x4c>
			ex_rx_index=0;
 1ea:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <ex_rx_index>
			ex_rx_enable = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <ex_rx_enable>
			ex_rx_data_complite = false;
 1f4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <__vector_11+0x84>
			
		}
		
		if ( (data == USART_STOPPACKET) && (ex_rx_enable == 1) )
 1fa:	9b 3b       	cpi	r25, 0xBB	; 187
 1fc:	59 f4       	brne	.+22     	; 0x214 <__vector_11+0x7c>
 1fe:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ex_rx_enable>
 202:	88 23       	and	r24, r24
 204:	09 f4       	brne	.+2      	; 0x208 <__vector_11+0x70>
 206:	41 c0       	rjmp	.+130    	; 0x28a <__vector_11+0xf2>
		{
			ex_rx_enable = 0;
 208:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <ex_rx_enable>
			ex_rx_data_complite = true;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 212:	3b c0       	rjmp	.+118    	; 0x28a <__vector_11+0xf2>
		}
		
		if (ex_rx_enable == 1)
 214:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ex_rx_enable>
 218:	88 23       	and	r24, r24
 21a:	b9 f1       	breq	.+110    	; 0x28a <__vector_11+0xf2>
		{
			if ( (ex_rx_index >= 0) && (ex_rx_index <= 4) ) // запись первых 4х данных
 21c:	c0 91 8f 00 	lds	r28, 0x008F	; 0x80008f <ex_rx_index>
 220:	c5 30       	cpi	r28, 0x05	; 5
 222:	b8 f4       	brcc	.+46     	; 0x252 <__vector_11+0xba>
			{
				ex_rx_buffer_adr[ex_rx_index] = data;
 224:	ec 2f       	mov	r30, r28
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e5 57       	subi	r30, 0x75	; 117
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	90 83       	st	Z, r25
				if (ex_rx_index == 4)
 22e:	c4 30       	cpi	r28, 0x04	; 4
 230:	61 f4       	brne	.+24     	; 0x24a <__vector_11+0xb2>
				{
					if ( !strcat(ex_rx_buffer_adr, DEVICE_MAC) )
 232:	60 e6       	ldi	r22, 0x60	; 96
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	8b e8       	ldi	r24, 0x8B	; 139
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 ba 01 	call	0x374	; 0x374 <strcat>
 23e:	89 2b       	or	r24, r25
 240:	21 f4       	brne	.+8      	; 0x24a <__vector_11+0xb2>
					{
						ex_rx_enable = 0;
 242:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <ex_rx_enable>
						ex_rx_data_complite = false;
 246:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
					}
				}
				++ex_rx_index;
 24a:	cf 5f       	subi	r28, 0xFF	; 255
 24c:	c0 93 8f 00 	sts	0x008F, r28	; 0x80008f <ex_rx_index>
 250:	13 c0       	rjmp	.+38     	; 0x278 <__vector_11+0xe0>
			} else if (ex_rx_index == 5) // записываем адрес ДБК
 252:	c5 30       	cpi	r28, 0x05	; 5
 254:	31 f4       	brne	.+12     	; 0x262 <__vector_11+0xca>
			{
				ex_rx_buffer_cmd = data;
 256:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <ex_rx_buffer_cmd>
				++ex_rx_index;
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <ex_rx_index>
 260:	14 c0       	rjmp	.+40     	; 0x28a <__vector_11+0xf2>
			} else if (ex_rx_index > 5)
 262:	c6 30       	cpi	r28, 0x06	; 6
 264:	48 f0       	brcs	.+18     	; 0x278 <__vector_11+0xe0>
			{
				sub_rx_index = ex_rx_index - 6;
				ex_rx_buffer_dat[sub_rx_index] = data;
 266:	ea ef       	ldi	r30, 0xFA	; 250
 268:	ec 0f       	add	r30, r28
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e6 58       	subi	r30, 0x86	; 134
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	90 83       	st	Z, r25
				++ex_rx_index;
 272:	cf 5f       	subi	r28, 0xFF	; 255
 274:	c0 93 8f 00 	sts	0x008F, r28	; 0x80008f <ex_rx_index>
			}

			if (ex_rx_index >= RX_BUFFER_SIZE)
 278:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <ex_rx_index>
 27c:	86 31       	cpi	r24, 0x16	; 22
 27e:	28 f0       	brcs	.+10     	; 0x28a <__vector_11+0xf2>
			{
				ex_rx_enable = false;
 280:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <ex_rx_enable>
				ex_rx_buffer_overflow=1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <ex_rx_buffer_overflow>
			}
			
		}
		
	}
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	cf 91       	pop	r28
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <_Z12ExchangeUARTcc>:

void ExchangeUART(char rx_buffer_cmd, char rx_buffer_dat /*char rx_buffer_dat[RX_DATA_SIZE]*/)
{
 2ae:	cf 93       	push	r28
	//char tmp_rx_buffer[RX_DATA_SIZE];
	if (rx_buffer_cmd == 0x02) // Активация устройства
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	c1 f4       	brne	.+48     	; 0x2e4 <_Z12ExchangeUARTcc+0x36>
 2b4:	c6 2f       	mov	r28, r22
	{

		//memset(tmp_rx_buffer, 0, sizeof(tmp_rx_buffer));
		//sprintf(tmp_rx_buffer, "%s", "GOOD!!!");
		LEDLAMP_ON(1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <_Z10LEDLAMP_ONj>
		//USART_SendPacket(DEVICE_MAC, 0xA2, tmp_rx_buffer);
		USART_SendPacket(DEVICE_MAC, 0x01, rx_buffer_dat);
 2be:	4c 2f       	mov	r20, r28
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 8b 00 	call	0x116	; 0x116 <_Z16USART_SendPacketPccc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	2f e7       	ldi	r18, 0x7F	; 127
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <_Z12ExchangeUARTcc+0x22>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_Z12ExchangeUARTcc+0x2c>
 2da:	00 00       	nop
		_delay_ms(50);
		LEDLAMP_OFF(1);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 54 00 	call	0xa8	; 0xa8 <_Z11LEDLAMP_OFFj>
	}
}
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <main>:

int main(void)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <main+0x6>
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <main+0x8>
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	UART_Init(8); //115200
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z9UART_Initj>
	char rx_device_mac[4] = {0xF2, 0xF2, 0xF2, 0xF2};
 2fc:	82 ef       	ldi	r24, 0xF2	; 242
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	8a 83       	std	Y+2, r24	; 0x02
 302:	8b 83       	std	Y+3, r24	; 0x03
 304:	8c 83       	std	Y+4, r24	; 0x04
		
	
	DDRD |= ( 1 << PD3);	// Порт на выход
 306:	8b 9a       	sbi	0x11, 3	; 17
	RS485_RS; // Установить RE DE в 0. Прием
 308:	93 98       	cbi	0x12, 3	; 18
	//PORTD = ( 1 << PD3);	// порт на 1
	
	DDRC |= ( 1 << PC0) | ( 1 << PC1);	// Порт на выход
 30a:	84 b3       	in	r24, 0x14	; 20
 30c:	83 60       	ori	r24, 0x03	; 3
 30e:	84 bb       	out	0x14, r24	; 20
	
	sei();
 310:	78 94       	sei
 312:	8f e2       	ldi	r24, 0x2F	; 47
 314:	95 e7       	ldi	r25, 0x75	; 117
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x2e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x34>
 31c:	00 00       	nop
	
	while(1)
	{
		_delay_ms(15);
		//memset(ex_rx_buffer_dat, 0, sizeof(ex_rx_buffer_dat));
		USART_SendPacket(rx_device_mac, 0x01, ex_rx_buffer_dat1);
 31e:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <ex_rx_buffer_dat1>
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 8b 00 	call	0x116	; 0x116 <_Z16USART_SendPacketPccc>
		LEDLAMP_ON(0);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <_Z10LEDLAMP_ONj>
 334:	9f e7       	ldi	r25, 0x7F	; 127
 336:	28 e3       	ldi	r18, 0x38	; 56
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	91 50       	subi	r25, 0x01	; 1
 33c:	20 40       	sbci	r18, 0x00	; 0
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x52>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x5c>
 344:	00 00       	nop
		_delay_ms(50);
		LEDLAMP_OFF(0);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 54 00 	call	0xa8	; 0xa8 <_Z11LEDLAMP_OFFj>
		//PORTD = ~( 1 << PD3);
		//RS485_RS; 
		//_delay_ms(1);
		if (ex_rx_data_complite)
 34e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 352:	88 23       	and	r24, r24
 354:	41 f0       	breq	.+16     	; 0x366 <main+0x7e>
		{
			ex_rx_data_complite = false;
 356:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
			ExchangeUART(ex_rx_buffer_cmd, ex_rx_buffer_dat1);
 35a:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <ex_rx_buffer_dat1>
 35e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ex_rx_buffer_cmd>
 362:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z12ExchangeUARTcc>
 366:	8f e2       	ldi	r24, 0x2F	; 47
 368:	95 e7       	ldi	r25, 0x75	; 117
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x82>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x88>
 370:	00 00       	nop
 372:	cf cf       	rjmp	.-98     	; 0x312 <main+0x2a>

00000374 <strcat>:
 374:	fb 01       	movw	r30, r22
 376:	dc 01       	movw	r26, r24
 378:	0d 90       	ld	r0, X+
 37a:	00 20       	and	r0, r0
 37c:	e9 f7       	brne	.-6      	; 0x378 <strcat+0x4>
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	01 90       	ld	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	00 20       	and	r0, r0
 386:	e1 f7       	brne	.-8      	; 0x380 <strcat+0xc>
 388:	08 95       	ret

0000038a <sprintf>:
 38a:	ae e0       	ldi	r26, 0x0E	; 14
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	eb ec       	ldi	r30, 0xCB	; 203
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	0c 94 86 04 	jmp	0x90c	; 0x90c <__prologue_saves__+0x1c>
 396:	0d 89       	ldd	r16, Y+21	; 0x15
 398:	1e 89       	ldd	r17, Y+22	; 0x16
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	8c 83       	std	Y+4, r24	; 0x04
 39e:	1a 83       	std	Y+2, r17	; 0x02
 3a0:	09 83       	std	Y+1, r16	; 0x01
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	9f e7       	ldi	r25, 0x7F	; 127
 3a6:	9e 83       	std	Y+6, r25	; 0x06
 3a8:	8d 83       	std	Y+5, r24	; 0x05
 3aa:	ae 01       	movw	r20, r28
 3ac:	47 5e       	subi	r20, 0xE7	; 231
 3ae:	5f 4f       	sbci	r21, 0xFF	; 255
 3b0:	6f 89       	ldd	r22, Y+23	; 0x17
 3b2:	78 8d       	ldd	r23, Y+24	; 0x18
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <vfprintf>
 3bc:	ef 81       	ldd	r30, Y+7	; 0x07
 3be:	f8 85       	ldd	r31, Y+8	; 0x08
 3c0:	e0 0f       	add	r30, r16
 3c2:	f1 1f       	adc	r31, r17
 3c4:	10 82       	st	Z, r1
 3c6:	2e 96       	adiw	r28, 0x0e	; 14
 3c8:	e4 e0       	ldi	r30, 0x04	; 4
 3ca:	0c 94 a2 04 	jmp	0x944	; 0x944 <__epilogue_restores__+0x1c>

000003ce <vfprintf>:
 3ce:	ab e0       	ldi	r26, 0x0B	; 11
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	ed ee       	ldi	r30, 0xED	; 237
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__prologue_saves__>
 3da:	6c 01       	movw	r12, r24
 3dc:	7b 01       	movw	r14, r22
 3de:	8a 01       	movw	r16, r20
 3e0:	fc 01       	movw	r30, r24
 3e2:	17 82       	std	Z+7, r1	; 0x07
 3e4:	16 82       	std	Z+6, r1	; 0x06
 3e6:	83 81       	ldd	r24, Z+3	; 0x03
 3e8:	81 ff       	sbrs	r24, 1
 3ea:	cc c1       	rjmp	.+920    	; 0x784 <__stack+0x325>
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	3c 01       	movw	r6, r24
 3f2:	f6 01       	movw	r30, r12
 3f4:	93 81       	ldd	r25, Z+3	; 0x03
 3f6:	f7 01       	movw	r30, r14
 3f8:	93 fd       	sbrc	r25, 3
 3fa:	85 91       	lpm	r24, Z+
 3fc:	93 ff       	sbrs	r25, 3
 3fe:	81 91       	ld	r24, Z+
 400:	7f 01       	movw	r14, r30
 402:	88 23       	and	r24, r24
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	ba c1       	rjmp	.+884    	; 0x77c <__stack+0x31d>
 408:	85 32       	cpi	r24, 0x25	; 37
 40a:	39 f4       	brne	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	93 fd       	sbrc	r25, 3
 40e:	85 91       	lpm	r24, Z+
 410:	93 ff       	sbrs	r25, 3
 412:	81 91       	ld	r24, Z+
 414:	7f 01       	movw	r14, r30
 416:	85 32       	cpi	r24, 0x25	; 37
 418:	29 f4       	brne	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41a:	b6 01       	movw	r22, r12
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 422:	e7 cf       	rjmp	.-50     	; 0x3f2 <vfprintf+0x24>
 424:	91 2c       	mov	r9, r1
 426:	21 2c       	mov	r2, r1
 428:	31 2c       	mov	r3, r1
 42a:	ff e1       	ldi	r31, 0x1F	; 31
 42c:	f3 15       	cp	r31, r3
 42e:	d8 f0       	brcs	.+54     	; 0x466 <__stack+0x7>
 430:	8b 32       	cpi	r24, 0x2B	; 43
 432:	79 f0       	breq	.+30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 434:	38 f4       	brcc	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 436:	80 32       	cpi	r24, 0x20	; 32
 438:	79 f0       	breq	.+30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43a:	83 32       	cpi	r24, 0x23	; 35
 43c:	a1 f4       	brne	.+40     	; 0x466 <__stack+0x7>
 43e:	23 2d       	mov	r18, r3
 440:	20 61       	ori	r18, 0x10	; 16
 442:	1d c0       	rjmp	.+58     	; 0x47e <__stack+0x1f>
 444:	8d 32       	cpi	r24, 0x2D	; 45
 446:	61 f0       	breq	.+24     	; 0x460 <__stack+0x1>
 448:	80 33       	cpi	r24, 0x30	; 48
 44a:	69 f4       	brne	.+26     	; 0x466 <__stack+0x7>
 44c:	23 2d       	mov	r18, r3
 44e:	21 60       	ori	r18, 0x01	; 1
 450:	16 c0       	rjmp	.+44     	; 0x47e <__stack+0x1f>
 452:	83 2d       	mov	r24, r3
 454:	82 60       	ori	r24, 0x02	; 2
 456:	38 2e       	mov	r3, r24
 458:	e3 2d       	mov	r30, r3
 45a:	e4 60       	ori	r30, 0x04	; 4
 45c:	3e 2e       	mov	r3, r30
 45e:	2a c0       	rjmp	.+84     	; 0x4b4 <__stack+0x55>
 460:	f3 2d       	mov	r31, r3
 462:	f8 60       	ori	r31, 0x08	; 8
 464:	1d c0       	rjmp	.+58     	; 0x4a0 <__stack+0x41>
 466:	37 fc       	sbrc	r3, 7
 468:	2d c0       	rjmp	.+90     	; 0x4c4 <__stack+0x65>
 46a:	20 ed       	ldi	r18, 0xD0	; 208
 46c:	28 0f       	add	r18, r24
 46e:	2a 30       	cpi	r18, 0x0A	; 10
 470:	40 f0       	brcs	.+16     	; 0x482 <__stack+0x23>
 472:	8e 32       	cpi	r24, 0x2E	; 46
 474:	b9 f4       	brne	.+46     	; 0x4a4 <__stack+0x45>
 476:	36 fc       	sbrc	r3, 6
 478:	81 c1       	rjmp	.+770    	; 0x77c <__stack+0x31d>
 47a:	23 2d       	mov	r18, r3
 47c:	20 64       	ori	r18, 0x40	; 64
 47e:	32 2e       	mov	r3, r18
 480:	19 c0       	rjmp	.+50     	; 0x4b4 <__stack+0x55>
 482:	36 fe       	sbrs	r3, 6
 484:	06 c0       	rjmp	.+12     	; 0x492 <__stack+0x33>
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	98 9e       	mul	r9, r24
 48a:	20 0d       	add	r18, r0
 48c:	11 24       	eor	r1, r1
 48e:	92 2e       	mov	r9, r18
 490:	11 c0       	rjmp	.+34     	; 0x4b4 <__stack+0x55>
 492:	ea e0       	ldi	r30, 0x0A	; 10
 494:	2e 9e       	mul	r2, r30
 496:	20 0d       	add	r18, r0
 498:	11 24       	eor	r1, r1
 49a:	22 2e       	mov	r2, r18
 49c:	f3 2d       	mov	r31, r3
 49e:	f0 62       	ori	r31, 0x20	; 32
 4a0:	3f 2e       	mov	r3, r31
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__stack+0x55>
 4a4:	8c 36       	cpi	r24, 0x6C	; 108
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <__stack+0x51>
 4a8:	83 2d       	mov	r24, r3
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	38 2e       	mov	r3, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__stack+0x55>
 4b0:	88 36       	cpi	r24, 0x68	; 104
 4b2:	41 f4       	brne	.+16     	; 0x4c4 <__stack+0x65>
 4b4:	f7 01       	movw	r30, r14
 4b6:	93 fd       	sbrc	r25, 3
 4b8:	85 91       	lpm	r24, Z+
 4ba:	93 ff       	sbrs	r25, 3
 4bc:	81 91       	ld	r24, Z+
 4be:	7f 01       	movw	r14, r30
 4c0:	81 11       	cpse	r24, r1
 4c2:	b3 cf       	rjmp	.-154    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 4c4:	98 2f       	mov	r25, r24
 4c6:	9f 7d       	andi	r25, 0xDF	; 223
 4c8:	95 54       	subi	r25, 0x45	; 69
 4ca:	93 30       	cpi	r25, 0x03	; 3
 4cc:	28 f4       	brcc	.+10     	; 0x4d8 <__stack+0x79>
 4ce:	0c 5f       	subi	r16, 0xFC	; 252
 4d0:	1f 4f       	sbci	r17, 0xFF	; 255
 4d2:	9f e3       	ldi	r25, 0x3F	; 63
 4d4:	99 83       	std	Y+1, r25	; 0x01
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__stack+0x93>
 4d8:	83 36       	cpi	r24, 0x63	; 99
 4da:	31 f0       	breq	.+12     	; 0x4e8 <__stack+0x89>
 4dc:	83 37       	cpi	r24, 0x73	; 115
 4de:	71 f0       	breq	.+28     	; 0x4fc <__stack+0x9d>
 4e0:	83 35       	cpi	r24, 0x53	; 83
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__stack+0x87>
 4e4:	59 c0       	rjmp	.+178    	; 0x598 <__stack+0x139>
 4e6:	21 c0       	rjmp	.+66     	; 0x52a <__stack+0xcb>
 4e8:	f8 01       	movw	r30, r16
 4ea:	80 81       	ld	r24, Z
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	0e 5f       	subi	r16, 0xFE	; 254
 4f0:	1f 4f       	sbci	r17, 0xFF	; 255
 4f2:	88 24       	eor	r8, r8
 4f4:	83 94       	inc	r8
 4f6:	91 2c       	mov	r9, r1
 4f8:	53 01       	movw	r10, r6
 4fa:	13 c0       	rjmp	.+38     	; 0x522 <__stack+0xc3>
 4fc:	28 01       	movw	r4, r16
 4fe:	f2 e0       	ldi	r31, 0x02	; 2
 500:	4f 0e       	add	r4, r31
 502:	51 1c       	adc	r5, r1
 504:	f8 01       	movw	r30, r16
 506:	a0 80       	ld	r10, Z
 508:	b1 80       	ldd	r11, Z+1	; 0x01
 50a:	36 fe       	sbrs	r3, 6
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__stack+0xb5>
 50e:	69 2d       	mov	r22, r9
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0xb9>
 514:	6f ef       	ldi	r22, 0xFF	; 255
 516:	7f ef       	ldi	r23, 0xFF	; 255
 518:	c5 01       	movw	r24, r10
 51a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strnlen>
 51e:	4c 01       	movw	r8, r24
 520:	82 01       	movw	r16, r4
 522:	f3 2d       	mov	r31, r3
 524:	ff 77       	andi	r31, 0x7F	; 127
 526:	3f 2e       	mov	r3, r31
 528:	16 c0       	rjmp	.+44     	; 0x556 <__stack+0xf7>
 52a:	28 01       	movw	r4, r16
 52c:	22 e0       	ldi	r18, 0x02	; 2
 52e:	42 0e       	add	r4, r18
 530:	51 1c       	adc	r5, r1
 532:	f8 01       	movw	r30, r16
 534:	a0 80       	ld	r10, Z
 536:	b1 80       	ldd	r11, Z+1	; 0x01
 538:	36 fe       	sbrs	r3, 6
 53a:	03 c0       	rjmp	.+6      	; 0x542 <__stack+0xe3>
 53c:	69 2d       	mov	r22, r9
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <__stack+0xe7>
 542:	6f ef       	ldi	r22, 0xFF	; 255
 544:	7f ef       	ldi	r23, 0xFF	; 255
 546:	c5 01       	movw	r24, r10
 548:	0e 94 c8 03 	call	0x790	; 0x790 <strnlen_P>
 54c:	4c 01       	movw	r8, r24
 54e:	f3 2d       	mov	r31, r3
 550:	f0 68       	ori	r31, 0x80	; 128
 552:	3f 2e       	mov	r3, r31
 554:	82 01       	movw	r16, r4
 556:	33 fc       	sbrc	r3, 3
 558:	1b c0       	rjmp	.+54     	; 0x590 <__stack+0x131>
 55a:	82 2d       	mov	r24, r2
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	88 16       	cp	r8, r24
 560:	99 06       	cpc	r9, r25
 562:	b0 f4       	brcc	.+44     	; 0x590 <__stack+0x131>
 564:	b6 01       	movw	r22, r12
 566:	80 e2       	ldi	r24, 0x20	; 32
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 56e:	2a 94       	dec	r2
 570:	f4 cf       	rjmp	.-24     	; 0x55a <__stack+0xfb>
 572:	f5 01       	movw	r30, r10
 574:	37 fc       	sbrc	r3, 7
 576:	85 91       	lpm	r24, Z+
 578:	37 fe       	sbrs	r3, 7
 57a:	81 91       	ld	r24, Z+
 57c:	5f 01       	movw	r10, r30
 57e:	b6 01       	movw	r22, r12
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 586:	21 10       	cpse	r2, r1
 588:	2a 94       	dec	r2
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	82 1a       	sub	r8, r18
 58e:	91 08       	sbc	r9, r1
 590:	81 14       	cp	r8, r1
 592:	91 04       	cpc	r9, r1
 594:	71 f7       	brne	.-36     	; 0x572 <__stack+0x113>
 596:	e8 c0       	rjmp	.+464    	; 0x768 <__stack+0x309>
 598:	84 36       	cpi	r24, 0x64	; 100
 59a:	11 f0       	breq	.+4      	; 0x5a0 <__stack+0x141>
 59c:	89 36       	cpi	r24, 0x69	; 105
 59e:	41 f5       	brne	.+80     	; 0x5f0 <__stack+0x191>
 5a0:	f8 01       	movw	r30, r16
 5a2:	37 fe       	sbrs	r3, 7
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <__stack+0x155>
 5a6:	60 81       	ld	r22, Z
 5a8:	71 81       	ldd	r23, Z+1	; 0x01
 5aa:	82 81       	ldd	r24, Z+2	; 0x02
 5ac:	93 81       	ldd	r25, Z+3	; 0x03
 5ae:	0c 5f       	subi	r16, 0xFC	; 252
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <__stack+0x165>
 5b4:	60 81       	ld	r22, Z
 5b6:	71 81       	ldd	r23, Z+1	; 0x01
 5b8:	07 2e       	mov	r0, r23
 5ba:	00 0c       	add	r0, r0
 5bc:	88 0b       	sbc	r24, r24
 5be:	99 0b       	sbc	r25, r25
 5c0:	0e 5f       	subi	r16, 0xFE	; 254
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
 5c4:	f3 2d       	mov	r31, r3
 5c6:	ff 76       	andi	r31, 0x6F	; 111
 5c8:	3f 2e       	mov	r3, r31
 5ca:	97 ff       	sbrs	r25, 7
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <__stack+0x181>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	f0 68       	ori	r31, 0x80	; 128
 5de:	3f 2e       	mov	r3, r31
 5e0:	2a e0       	ldi	r18, 0x0A	; 10
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	a3 01       	movw	r20, r6
 5e6:	0e 94 1a 04 	call	0x834	; 0x834 <__ultoa_invert>
 5ea:	88 2e       	mov	r8, r24
 5ec:	86 18       	sub	r8, r6
 5ee:	45 c0       	rjmp	.+138    	; 0x67a <__stack+0x21b>
 5f0:	85 37       	cpi	r24, 0x75	; 117
 5f2:	31 f4       	brne	.+12     	; 0x600 <__stack+0x1a1>
 5f4:	23 2d       	mov	r18, r3
 5f6:	2f 7e       	andi	r18, 0xEF	; 239
 5f8:	b2 2e       	mov	r11, r18
 5fa:	2a e0       	ldi	r18, 0x0A	; 10
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	25 c0       	rjmp	.+74     	; 0x64a <__stack+0x1eb>
 600:	93 2d       	mov	r25, r3
 602:	99 7f       	andi	r25, 0xF9	; 249
 604:	b9 2e       	mov	r11, r25
 606:	8f 36       	cpi	r24, 0x6F	; 111
 608:	c1 f0       	breq	.+48     	; 0x63a <__stack+0x1db>
 60a:	18 f4       	brcc	.+6      	; 0x612 <__stack+0x1b3>
 60c:	88 35       	cpi	r24, 0x58	; 88
 60e:	79 f0       	breq	.+30     	; 0x62e <__stack+0x1cf>
 610:	b5 c0       	rjmp	.+362    	; 0x77c <__stack+0x31d>
 612:	80 37       	cpi	r24, 0x70	; 112
 614:	19 f0       	breq	.+6      	; 0x61c <__stack+0x1bd>
 616:	88 37       	cpi	r24, 0x78	; 120
 618:	21 f0       	breq	.+8      	; 0x622 <__stack+0x1c3>
 61a:	b0 c0       	rjmp	.+352    	; 0x77c <__stack+0x31d>
 61c:	e9 2f       	mov	r30, r25
 61e:	e0 61       	ori	r30, 0x10	; 16
 620:	be 2e       	mov	r11, r30
 622:	b4 fe       	sbrs	r11, 4
 624:	0d c0       	rjmp	.+26     	; 0x640 <__stack+0x1e1>
 626:	fb 2d       	mov	r31, r11
 628:	f4 60       	ori	r31, 0x04	; 4
 62a:	bf 2e       	mov	r11, r31
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__stack+0x1e1>
 62e:	34 fe       	sbrs	r3, 4
 630:	0a c0       	rjmp	.+20     	; 0x646 <__stack+0x1e7>
 632:	29 2f       	mov	r18, r25
 634:	26 60       	ori	r18, 0x06	; 6
 636:	b2 2e       	mov	r11, r18
 638:	06 c0       	rjmp	.+12     	; 0x646 <__stack+0x1e7>
 63a:	28 e0       	ldi	r18, 0x08	; 8
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	05 c0       	rjmp	.+10     	; 0x64a <__stack+0x1eb>
 640:	20 e1       	ldi	r18, 0x10	; 16
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <__stack+0x1eb>
 646:	20 e1       	ldi	r18, 0x10	; 16
 648:	32 e0       	ldi	r19, 0x02	; 2
 64a:	f8 01       	movw	r30, r16
 64c:	b7 fe       	sbrs	r11, 7
 64e:	07 c0       	rjmp	.+14     	; 0x65e <__stack+0x1ff>
 650:	60 81       	ld	r22, Z
 652:	71 81       	ldd	r23, Z+1	; 0x01
 654:	82 81       	ldd	r24, Z+2	; 0x02
 656:	93 81       	ldd	r25, Z+3	; 0x03
 658:	0c 5f       	subi	r16, 0xFC	; 252
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	06 c0       	rjmp	.+12     	; 0x66a <__stack+0x20b>
 65e:	60 81       	ld	r22, Z
 660:	71 81       	ldd	r23, Z+1	; 0x01
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 5f       	subi	r16, 0xFE	; 254
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	a3 01       	movw	r20, r6
 66c:	0e 94 1a 04 	call	0x834	; 0x834 <__ultoa_invert>
 670:	88 2e       	mov	r8, r24
 672:	86 18       	sub	r8, r6
 674:	fb 2d       	mov	r31, r11
 676:	ff 77       	andi	r31, 0x7F	; 127
 678:	3f 2e       	mov	r3, r31
 67a:	36 fe       	sbrs	r3, 6
 67c:	0d c0       	rjmp	.+26     	; 0x698 <__stack+0x239>
 67e:	23 2d       	mov	r18, r3
 680:	2e 7f       	andi	r18, 0xFE	; 254
 682:	a2 2e       	mov	r10, r18
 684:	89 14       	cp	r8, r9
 686:	58 f4       	brcc	.+22     	; 0x69e <__stack+0x23f>
 688:	34 fe       	sbrs	r3, 4
 68a:	0b c0       	rjmp	.+22     	; 0x6a2 <__stack+0x243>
 68c:	32 fc       	sbrc	r3, 2
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <__stack+0x243>
 690:	83 2d       	mov	r24, r3
 692:	8e 7e       	andi	r24, 0xEE	; 238
 694:	a8 2e       	mov	r10, r24
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <__stack+0x243>
 698:	b8 2c       	mov	r11, r8
 69a:	a3 2c       	mov	r10, r3
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <__stack+0x245>
 69e:	b8 2c       	mov	r11, r8
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__stack+0x245>
 6a2:	b9 2c       	mov	r11, r9
 6a4:	a4 fe       	sbrs	r10, 4
 6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <__stack+0x267>
 6a8:	fe 01       	movw	r30, r28
 6aa:	e8 0d       	add	r30, r8
 6ac:	f1 1d       	adc	r31, r1
 6ae:	80 81       	ld	r24, Z
 6b0:	80 33       	cpi	r24, 0x30	; 48
 6b2:	21 f4       	brne	.+8      	; 0x6bc <__stack+0x25d>
 6b4:	9a 2d       	mov	r25, r10
 6b6:	99 7e       	andi	r25, 0xE9	; 233
 6b8:	a9 2e       	mov	r10, r25
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__stack+0x26f>
 6bc:	a2 fe       	sbrs	r10, 2
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <__stack+0x26d>
 6c0:	b3 94       	inc	r11
 6c2:	b3 94       	inc	r11
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__stack+0x26f>
 6c6:	8a 2d       	mov	r24, r10
 6c8:	86 78       	andi	r24, 0x86	; 134
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__stack+0x26f>
 6cc:	b3 94       	inc	r11
 6ce:	a3 fc       	sbrc	r10, 3
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__stack+0x295>
 6d2:	a0 fe       	sbrs	r10, 0
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <__stack+0x283>
 6d6:	b2 14       	cp	r11, r2
 6d8:	88 f4       	brcc	.+34     	; 0x6fc <__stack+0x29d>
 6da:	28 0c       	add	r2, r8
 6dc:	92 2c       	mov	r9, r2
 6de:	9b 18       	sub	r9, r11
 6e0:	0e c0       	rjmp	.+28     	; 0x6fe <__stack+0x29f>
 6e2:	b2 14       	cp	r11, r2
 6e4:	60 f4       	brcc	.+24     	; 0x6fe <__stack+0x29f>
 6e6:	b6 01       	movw	r22, r12
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 6f0:	b3 94       	inc	r11
 6f2:	f7 cf       	rjmp	.-18     	; 0x6e2 <__stack+0x283>
 6f4:	b2 14       	cp	r11, r2
 6f6:	18 f4       	brcc	.+6      	; 0x6fe <__stack+0x29f>
 6f8:	2b 18       	sub	r2, r11
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <__stack+0x2a1>
 6fc:	98 2c       	mov	r9, r8
 6fe:	21 2c       	mov	r2, r1
 700:	a4 fe       	sbrs	r10, 4
 702:	10 c0       	rjmp	.+32     	; 0x724 <__stack+0x2c5>
 704:	b6 01       	movw	r22, r12
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 70e:	a2 fe       	sbrs	r10, 2
 710:	17 c0       	rjmp	.+46     	; 0x740 <__stack+0x2e1>
 712:	a1 fc       	sbrc	r10, 1
 714:	03 c0       	rjmp	.+6      	; 0x71c <__stack+0x2bd>
 716:	88 e7       	ldi	r24, 0x78	; 120
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <__stack+0x2c1>
 71c:	88 e5       	ldi	r24, 0x58	; 88
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	b6 01       	movw	r22, r12
 722:	0c c0       	rjmp	.+24     	; 0x73c <__stack+0x2dd>
 724:	8a 2d       	mov	r24, r10
 726:	86 78       	andi	r24, 0x86	; 134
 728:	59 f0       	breq	.+22     	; 0x740 <__stack+0x2e1>
 72a:	a1 fe       	sbrs	r10, 1
 72c:	02 c0       	rjmp	.+4      	; 0x732 <__stack+0x2d3>
 72e:	8b e2       	ldi	r24, 0x2B	; 43
 730:	01 c0       	rjmp	.+2      	; 0x734 <__stack+0x2d5>
 732:	80 e2       	ldi	r24, 0x20	; 32
 734:	a7 fc       	sbrc	r10, 7
 736:	8d e2       	ldi	r24, 0x2D	; 45
 738:	b6 01       	movw	r22, r12
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 740:	89 14       	cp	r8, r9
 742:	38 f4       	brcc	.+14     	; 0x752 <__stack+0x2f3>
 744:	b6 01       	movw	r22, r12
 746:	80 e3       	ldi	r24, 0x30	; 48
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 74e:	9a 94       	dec	r9
 750:	f7 cf       	rjmp	.-18     	; 0x740 <__stack+0x2e1>
 752:	8a 94       	dec	r8
 754:	f3 01       	movw	r30, r6
 756:	e8 0d       	add	r30, r8
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	b6 01       	movw	r22, r12
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 764:	81 10       	cpse	r8, r1
 766:	f5 cf       	rjmp	.-22     	; 0x752 <__stack+0x2f3>
 768:	22 20       	and	r2, r2
 76a:	09 f4       	brne	.+2      	; 0x76e <__stack+0x30f>
 76c:	42 ce       	rjmp	.-892    	; 0x3f2 <vfprintf+0x24>
 76e:	b6 01       	movw	r22, r12
 770:	80 e2       	ldi	r24, 0x20	; 32
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 de 03 	call	0x7bc	; 0x7bc <fputc>
 778:	2a 94       	dec	r2
 77a:	f6 cf       	rjmp	.-20     	; 0x768 <__stack+0x309>
 77c:	f6 01       	movw	r30, r12
 77e:	86 81       	ldd	r24, Z+6	; 0x06
 780:	97 81       	ldd	r25, Z+7	; 0x07
 782:	02 c0       	rjmp	.+4      	; 0x788 <__stack+0x329>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	9f ef       	ldi	r25, 0xFF	; 255
 788:	2b 96       	adiw	r28, 0x0b	; 11
 78a:	e2 e1       	ldi	r30, 0x12	; 18
 78c:	0c 94 94 04 	jmp	0x928	; 0x928 <__epilogue_restores__>

00000790 <strnlen_P>:
 790:	fc 01       	movw	r30, r24
 792:	05 90       	lpm	r0, Z+
 794:	61 50       	subi	r22, 0x01	; 1
 796:	70 40       	sbci	r23, 0x00	; 0
 798:	01 10       	cpse	r0, r1
 79a:	d8 f7       	brcc	.-10     	; 0x792 <strnlen_P+0x2>
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	8e 0f       	add	r24, r30
 7a2:	9f 1f       	adc	r25, r31
 7a4:	08 95       	ret

000007a6 <strnlen>:
 7a6:	fc 01       	movw	r30, r24
 7a8:	61 50       	subi	r22, 0x01	; 1
 7aa:	70 40       	sbci	r23, 0x00	; 0
 7ac:	01 90       	ld	r0, Z+
 7ae:	01 10       	cpse	r0, r1
 7b0:	d8 f7       	brcc	.-10     	; 0x7a8 <strnlen+0x2>
 7b2:	80 95       	com	r24
 7b4:	90 95       	com	r25
 7b6:	8e 0f       	add	r24, r30
 7b8:	9f 1f       	adc	r25, r31
 7ba:	08 95       	ret

000007bc <fputc>:
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	fb 01       	movw	r30, r22
 7c6:	23 81       	ldd	r18, Z+3	; 0x03
 7c8:	21 fd       	sbrc	r18, 1
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <fputc+0x16>
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	2c c0       	rjmp	.+88     	; 0x82a <fputc+0x6e>
 7d2:	22 ff       	sbrs	r18, 2
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <fputc+0x46>
 7d6:	46 81       	ldd	r20, Z+6	; 0x06
 7d8:	57 81       	ldd	r21, Z+7	; 0x07
 7da:	24 81       	ldd	r18, Z+4	; 0x04
 7dc:	35 81       	ldd	r19, Z+5	; 0x05
 7de:	42 17       	cp	r20, r18
 7e0:	53 07       	cpc	r21, r19
 7e2:	44 f4       	brge	.+16     	; 0x7f4 <fputc+0x38>
 7e4:	a0 81       	ld	r26, Z
 7e6:	b1 81       	ldd	r27, Z+1	; 0x01
 7e8:	9d 01       	movw	r18, r26
 7ea:	2f 5f       	subi	r18, 0xFF	; 255
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
 7ee:	31 83       	std	Z+1, r19	; 0x01
 7f0:	20 83       	st	Z, r18
 7f2:	8c 93       	st	X, r24
 7f4:	26 81       	ldd	r18, Z+6	; 0x06
 7f6:	37 81       	ldd	r19, Z+7	; 0x07
 7f8:	2f 5f       	subi	r18, 0xFF	; 255
 7fa:	3f 4f       	sbci	r19, 0xFF	; 255
 7fc:	37 83       	std	Z+7, r19	; 0x07
 7fe:	26 83       	std	Z+6, r18	; 0x06
 800:	14 c0       	rjmp	.+40     	; 0x82a <fputc+0x6e>
 802:	8b 01       	movw	r16, r22
 804:	ec 01       	movw	r28, r24
 806:	fb 01       	movw	r30, r22
 808:	00 84       	ldd	r0, Z+8	; 0x08
 80a:	f1 85       	ldd	r31, Z+9	; 0x09
 80c:	e0 2d       	mov	r30, r0
 80e:	09 95       	icall
 810:	89 2b       	or	r24, r25
 812:	e1 f6       	brne	.-72     	; 0x7cc <fputc+0x10>
 814:	d8 01       	movw	r26, r16
 816:	16 96       	adiw	r26, 0x06	; 6
 818:	8d 91       	ld	r24, X+
 81a:	9c 91       	ld	r25, X
 81c:	17 97       	sbiw	r26, 0x07	; 7
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	17 96       	adiw	r26, 0x07	; 7
 822:	9c 93       	st	X, r25
 824:	8e 93       	st	-X, r24
 826:	16 97       	sbiw	r26, 0x06	; 6
 828:	ce 01       	movw	r24, r28
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <__ultoa_invert>:
 834:	fa 01       	movw	r30, r20
 836:	aa 27       	eor	r26, r26
 838:	28 30       	cpi	r18, 0x08	; 8
 83a:	51 f1       	breq	.+84     	; 0x890 <__ultoa_invert+0x5c>
 83c:	20 31       	cpi	r18, 0x10	; 16
 83e:	81 f1       	breq	.+96     	; 0x8a0 <__ultoa_invert+0x6c>
 840:	e8 94       	clt
 842:	6f 93       	push	r22
 844:	6e 7f       	andi	r22, 0xFE	; 254
 846:	6e 5f       	subi	r22, 0xFE	; 254
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	af 4f       	sbci	r26, 0xFF	; 255
 850:	b1 e0       	ldi	r27, 0x01	; 1
 852:	3e d0       	rcall	.+124    	; 0x8d0 <__ultoa_invert+0x9c>
 854:	b4 e0       	ldi	r27, 0x04	; 4
 856:	3c d0       	rcall	.+120    	; 0x8d0 <__ultoa_invert+0x9c>
 858:	67 0f       	add	r22, r23
 85a:	78 1f       	adc	r23, r24
 85c:	89 1f       	adc	r24, r25
 85e:	9a 1f       	adc	r25, r26
 860:	a1 1d       	adc	r26, r1
 862:	68 0f       	add	r22, r24
 864:	79 1f       	adc	r23, r25
 866:	8a 1f       	adc	r24, r26
 868:	91 1d       	adc	r25, r1
 86a:	a1 1d       	adc	r26, r1
 86c:	6a 0f       	add	r22, r26
 86e:	71 1d       	adc	r23, r1
 870:	81 1d       	adc	r24, r1
 872:	91 1d       	adc	r25, r1
 874:	a1 1d       	adc	r26, r1
 876:	20 d0       	rcall	.+64     	; 0x8b8 <__ultoa_invert+0x84>
 878:	09 f4       	brne	.+2      	; 0x87c <__ultoa_invert+0x48>
 87a:	68 94       	set
 87c:	3f 91       	pop	r19
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	26 9f       	mul	r18, r22
 882:	11 24       	eor	r1, r1
 884:	30 19       	sub	r19, r0
 886:	30 5d       	subi	r19, 0xD0	; 208
 888:	31 93       	st	Z+, r19
 88a:	de f6       	brtc	.-74     	; 0x842 <__ultoa_invert+0xe>
 88c:	cf 01       	movw	r24, r30
 88e:	08 95       	ret
 890:	46 2f       	mov	r20, r22
 892:	47 70       	andi	r20, 0x07	; 7
 894:	40 5d       	subi	r20, 0xD0	; 208
 896:	41 93       	st	Z+, r20
 898:	b3 e0       	ldi	r27, 0x03	; 3
 89a:	0f d0       	rcall	.+30     	; 0x8ba <__ultoa_invert+0x86>
 89c:	c9 f7       	brne	.-14     	; 0x890 <__ultoa_invert+0x5c>
 89e:	f6 cf       	rjmp	.-20     	; 0x88c <__ultoa_invert+0x58>
 8a0:	46 2f       	mov	r20, r22
 8a2:	4f 70       	andi	r20, 0x0F	; 15
 8a4:	40 5d       	subi	r20, 0xD0	; 208
 8a6:	4a 33       	cpi	r20, 0x3A	; 58
 8a8:	18 f0       	brcs	.+6      	; 0x8b0 <__ultoa_invert+0x7c>
 8aa:	49 5d       	subi	r20, 0xD9	; 217
 8ac:	31 fd       	sbrc	r19, 1
 8ae:	40 52       	subi	r20, 0x20	; 32
 8b0:	41 93       	st	Z+, r20
 8b2:	02 d0       	rcall	.+4      	; 0x8b8 <__ultoa_invert+0x84>
 8b4:	a9 f7       	brne	.-22     	; 0x8a0 <__ultoa_invert+0x6c>
 8b6:	ea cf       	rjmp	.-44     	; 0x88c <__ultoa_invert+0x58>
 8b8:	b4 e0       	ldi	r27, 0x04	; 4
 8ba:	a6 95       	lsr	r26
 8bc:	97 95       	ror	r25
 8be:	87 95       	ror	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__ultoa_invert+0x86>
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	61 05       	cpc	r22, r1
 8cc:	71 05       	cpc	r23, r1
 8ce:	08 95       	ret
 8d0:	9b 01       	movw	r18, r22
 8d2:	ac 01       	movw	r20, r24
 8d4:	0a 2e       	mov	r0, r26
 8d6:	06 94       	lsr	r0
 8d8:	57 95       	ror	r21
 8da:	47 95       	ror	r20
 8dc:	37 95       	ror	r19
 8de:	27 95       	ror	r18
 8e0:	ba 95       	dec	r27
 8e2:	c9 f7       	brne	.-14     	; 0x8d6 <__ultoa_invert+0xa2>
 8e4:	62 0f       	add	r22, r18
 8e6:	73 1f       	adc	r23, r19
 8e8:	84 1f       	adc	r24, r20
 8ea:	95 1f       	adc	r25, r21
 8ec:	a0 1d       	adc	r26, r0
 8ee:	08 95       	ret

000008f0 <__prologue_saves__>:
 8f0:	2f 92       	push	r2
 8f2:	3f 92       	push	r3
 8f4:	4f 92       	push	r4
 8f6:	5f 92       	push	r5
 8f8:	6f 92       	push	r6
 8fa:	7f 92       	push	r7
 8fc:	8f 92       	push	r8
 8fe:	9f 92       	push	r9
 900:	af 92       	push	r10
 902:	bf 92       	push	r11
 904:	cf 92       	push	r12
 906:	df 92       	push	r13
 908:	ef 92       	push	r14
 90a:	ff 92       	push	r15
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	ca 1b       	sub	r28, r26
 91a:	db 0b       	sbc	r29, r27
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	f8 94       	cli
 920:	de bf       	out	0x3e, r29	; 62
 922:	0f be       	out	0x3f, r0	; 63
 924:	cd bf       	out	0x3d, r28	; 61
 926:	09 94       	ijmp

00000928 <__epilogue_restores__>:
 928:	2a 88       	ldd	r2, Y+18	; 0x12
 92a:	39 88       	ldd	r3, Y+17	; 0x11
 92c:	48 88       	ldd	r4, Y+16	; 0x10
 92e:	5f 84       	ldd	r5, Y+15	; 0x0f
 930:	6e 84       	ldd	r6, Y+14	; 0x0e
 932:	7d 84       	ldd	r7, Y+13	; 0x0d
 934:	8c 84       	ldd	r8, Y+12	; 0x0c
 936:	9b 84       	ldd	r9, Y+11	; 0x0b
 938:	aa 84       	ldd	r10, Y+10	; 0x0a
 93a:	b9 84       	ldd	r11, Y+9	; 0x09
 93c:	c8 84       	ldd	r12, Y+8	; 0x08
 93e:	df 80       	ldd	r13, Y+7	; 0x07
 940:	ee 80       	ldd	r14, Y+6	; 0x06
 942:	fd 80       	ldd	r15, Y+5	; 0x05
 944:	0c 81       	ldd	r16, Y+4	; 0x04
 946:	1b 81       	ldd	r17, Y+3	; 0x03
 948:	aa 81       	ldd	r26, Y+2	; 0x02
 94a:	b9 81       	ldd	r27, Y+1	; 0x01
 94c:	ce 0f       	add	r28, r30
 94e:	d1 1d       	adc	r29, r1
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	ed 01       	movw	r28, r26
 95c:	08 95       	ret

0000095e <_exit>:
 95e:	f8 94       	cli

00000960 <__stop_program>:
 960:	ff cf       	rjmp	.-2      	; 0x960 <__stop_program>
